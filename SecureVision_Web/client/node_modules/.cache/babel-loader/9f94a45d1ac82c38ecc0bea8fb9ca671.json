{"ast":null,"code":"const Axios = require('axios');\n\nconst Tesseract = require('tesseract.js');\n\nconst carsTest = require('../cameraFeed/carsTest.mp4');\n\nconst testPlate = require('./testPlate.jpg');\n\nconst testPlate1 = require('./testPlate1.jpg');\n\nconst testCars = require('./testCars.jpeg');\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst modelTest = require('./testingModel.jpg');\n\nlet video = document.createElement('VIDEO');\nvideo.setAttribute('autoplay', 'true');\nvideo.src = carsTest;\nlet canvas = document.createElement('canvas');\nlet context = canvas.getContext('2d');\ncontext.globalCompositeOperation = 'difference';\nlet unrecognizedList = [];\n\nconst sendImage = async () => {\n  // get screenshot from current video \n  context.drawImage(video, 0, 0, 640, 480);\n  let dataUrl = canvas.toDataURL(); // load TensorFlow model\n\n  const model = await cocoSsd.load();\n  let currentFrame = new Image();\n  currentFrame.src = modelTest;\n  currentFrame.width = 400;\n  currentFrame.height = 400; // classify image\n\n  const predictions = await model.detect(video);\n  console.log(\"Predictions: \", predictions);\n  Tesseract.recognize(testPlate, 'eng').then(({\n    data: {\n      text\n    }\n  }) => {\n    console.log(\"Recognized text: \", text);\n  }); // for each video in the current list of video endpoints\n  // check db for the plate\n  // if unrecognized, send to db and alert \n\n  let currentPlateNumber = '123456'; // eventually changed to get unrecognized plates from db \n\n  if (!unrecognizedList.includes(currentPlateNumber)) {\n    let response = Axios.post('/api/unrecognized/addUnrecognized', {\n      plateNumber: currentPlateNumber\n    });\n    console.log(response);\n    unrecognizedList.push(currentPlateNumber);\n  }\n\n  setTimeout(sendImage, 10000);\n};\n\nmodule.exports = sendImage;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dashboard/sendFeed.js"],"names":["Axios","require","Tesseract","carsTest","testPlate","testPlate1","testCars","cocoSsd","modelTest","video","document","createElement","setAttribute","src","canvas","context","getContext","globalCompositeOperation","unrecognizedList","sendImage","drawImage","dataUrl","toDataURL","model","load","currentFrame","Image","width","height","predictions","detect","console","log","recognize","then","data","text","currentPlateNumber","includes","response","post","plateNumber","push","setTimeout","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAME,QAAQ,GAAGF,OAAO,CAAC,4BAAD,CAAxB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,6BAAD,CAAvB;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAIQ,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ;AACAF,KAAK,CAACG,YAAN,CAAmB,UAAnB,EAA+B,MAA/B;AAEAH,KAAK,CAACI,GAAN,GAAYV,QAAZ;AAEA,IAAIW,MAAM,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,IAAII,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACAD,OAAO,CAACE,wBAAR,GAAmC,YAAnC;AAEA,IAAIC,gBAAgB,GAAG,EAAvB;;AAEA,MAAMC,SAAS,GAAG,YAAW;AAEzB;AACAJ,EAAAA,OAAO,CAACK,SAAR,CAAkBX,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,GAA/B,EAAoC,GAApC;AACA,MAAIY,OAAO,GAAGP,MAAM,CAACQ,SAAP,EAAd,CAJyB,CAMzB;;AACA,QAAMC,KAAK,GAAG,MAAMhB,OAAO,CAACiB,IAAR,EAApB;AAEA,MAAIC,YAAY,GAAG,IAAIC,KAAJ,EAAnB;AACAD,EAAAA,YAAY,CAACZ,GAAb,GAAmBL,SAAnB;AACAiB,EAAAA,YAAY,CAACE,KAAb,GAAqB,GAArB;AACAF,EAAAA,YAAY,CAACG,MAAb,GAAsB,GAAtB,CAZyB,CAczB;;AACA,QAAMC,WAAW,GAAG,MAAMN,KAAK,CAACO,MAAN,CAAarB,KAAb,CAA1B;AAEAsB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,WAA7B;AAEA3B,EAAAA,SAAS,CAAC+B,SAAV,CACI7B,SADJ,EAEI,KAFJ,EAGE8B,IAHF,CAGO,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAD,KAAwB;AAC3BL,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCI,IAAjC;AACH,GALD,EAnByB,CA2BzB;AAEA;AAEA;;AAEA,MAAIC,kBAAkB,GAAG,QAAzB,CAjCyB,CAmCzB;;AAEA,MAAG,CAAEnB,gBAAgB,CAACoB,QAAjB,CAA0BD,kBAA1B,CAAL,EAAoD;AAEhD,QAAIE,QAAQ,GAAGvC,KAAK,CAACwC,IAAN,CAAW,mCAAX,EAAgD;AAC3DC,MAAAA,WAAW,EAAEJ;AAD8C,KAAhD,CAAf;AAIAN,IAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACArB,IAAAA,gBAAgB,CAACwB,IAAjB,CAAsBL,kBAAtB;AACH;;AAEDM,EAAAA,UAAU,CAACxB,SAAD,EAAY,KAAZ,CAAV;AACH,CAhDD;;AAmDAyB,MAAM,CAACC,OAAP,GAAiB1B,SAAjB","sourcesContent":["const Axios = require('axios')\nconst Tesseract = require('tesseract.js')\n\nconst carsTest = require('../cameraFeed/carsTest.mp4')\nconst testPlate = require('./testPlate.jpg')\nconst testPlate1 = require('./testPlate1.jpg')\nconst testCars = require('./testCars.jpeg')\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst modelTest = require('./testingModel.jpg')\n\nlet video = document.createElement('VIDEO')\nvideo.setAttribute('autoplay', 'true')\n\nvideo.src = carsTest\n\nlet canvas = document.createElement('canvas')\nlet context = canvas.getContext('2d')\ncontext.globalCompositeOperation = 'difference'\n\nlet unrecognizedList = []\n\nconst sendImage = async() => {\n\n    // get screenshot from current video \n    context.drawImage(video, 0, 0, 640, 480)\n    let dataUrl = canvas.toDataURL()\n\n    // load TensorFlow model\n    const model = await cocoSsd.load()\n\n    let currentFrame = new Image()\n    currentFrame.src = modelTest\n    currentFrame.width = 400\n    currentFrame.height = 400\n\n    // classify image\n    const predictions = await model.detect(video)\n\n    console.log(\"Predictions: \", predictions)\n\n    Tesseract.recognize(\n        testPlate,\n        'eng'\n    ).then(({ data: { text }} ) => {\n        console.log(\"Recognized text: \", text)\n    })\n\n\n    // for each video in the current list of video endpoints\n\n    // check db for the plate\n\n    // if unrecognized, send to db and alert \n\n    let currentPlateNumber = '123456'\n\n    // eventually changed to get unrecognized plates from db \n\n    if(!(unrecognizedList.includes(currentPlateNumber))){\n\n        let response = Axios.post('/api/unrecognized/addUnrecognized', {\n            plateNumber: currentPlateNumber\n        })\n\n        console.log(response)\n        unrecognizedList.push(currentPlateNumber)\n    }\n\n    setTimeout(sendImage, 10000)\n}   \n\n\nmodule.exports = sendImage"]},"metadata":{},"sourceType":"module"}