{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/dailyActivity/activityLayout.js\";\nimport React, { Component } from 'react';\nimport TableFixedHeader from './completeLog';\nimport Snackbar from '../snackbar/snackbar';\nimport Button from '@material-ui/core/Button';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from 'react-loader-spinner';\nimport io from 'socket.io-client';\nimport EmergencyContactsModal from '../dashboard/dashboardElements/emergency';\nimport Axios from 'axios';\nconst accentColor = '#1C63CD';\nconst accentColor_secondary = '#FD663A'; // component to show the high risk activity as well as the parent activity \n\nclass activityLayout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.socket = io.connect('http://localhost:8000');\n    this.state = {\n      dataList: [],\n      triggerHighRisk: false,\n      mostRecentCriminalNumber: '',\n      mostRecentCriminalType: '',\n      mostRecentCriminalTime: '',\n      snackbar: null,\n      loading: true\n    };\n    this.schoolID = JSON.parse(localStorage.getItem('userObj'))._id;\n\n    this.refresh = async src => {\n      console.log('instance of refresh'); // get all feed data (parents and high risk) from the database\n      // database is updated in the Python program so Mongo collection may or may not be updated on each cycle\n\n      let data = await Axios.get('/api/lpr/getGeneralData'); // filter the data so the user only sees school specific plates \n\n      let rawData = data.data;\n      rawData = rawData.filter(d => {\n        return d.schoolID === this.schoolID;\n      }); // sort the data by time \n\n      let sorted = rawData.sort((a, b) => a.date < b.date ? 1 : a.date === b.date ? a.time < b.time ? 1 : -1 : -1);\n      let currentList = this.state.dataList; // go through the new additions to the database \n\n      if (currentList.length != sorted.length && currentList.length != 0) {\n        const num_new = sorted.length - currentList.length;\n        console.log('New Plates: ', num_new);\n        let i = 0; // cycle through each new plate recognized \n\n        while (i < num_new) {\n          let newPlate = sorted[i];\n          console.log(newPlate); // new plate recognized is a high risk plate\n          // if this is the case, trigger the snackbar to show the data for the high risk plate recognized\n\n          if (newPlate.type != 'Parent') {\n            // TODO: render image data to frontend \n            // let binaryImageEncoding = newPlate.imageData\n            // let recognized_plate_img = new Image()\n            // let src = 'data:image/png;base64,' + binaryImageEncoding\n            // console.log(src)\n            // recognized_plate_img.src = src \n            let newPlateObj = newPlate; // localStorage.setItem('lastHighRisk', JSON.stringify(newPlateObj))\n\n            console.log('trigger high risk modal');\n            this.setState({\n              triggerHighRisk: true,\n              snackbar: /*#__PURE__*/React.createElement(Snackbar, {\n                message: [/*#__PURE__*/React.createElement(\"span\", {\n                  key: \"1\",\n                  style: {\n                    fontSize: '24px',\n                    marginBottom: '25px',\n                    color: ''\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 21\n                  }\n                }, \"High Risk Plate Detected\"), /*#__PURE__*/React.createElement(\"br\", {\n                  key: \"2\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 21\n                  }\n                }), /*#__PURE__*/React.createElement(\"br\", {\n                  key: \"3\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 39\n                  }\n                }),\n                /*#__PURE__*/\n                // recognized_plate_img,\n                React.createElement(\"img\", {\n                  src: src,\n                  style: {\n                    height: '400px',\n                    width: 'auto'\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 21\n                  }\n                }), /*#__PURE__*/React.createElement(\"span\", {\n                  key: \"4\",\n                  style: {\n                    fontSize: '20px',\n                    marginBottom: '15px'\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 21\n                  }\n                }, \"Plate: \", newPlate.plateNumber), /*#__PURE__*/React.createElement(\"br\", {\n                  key: \"5\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 21\n                  }\n                }), /*#__PURE__*/React.createElement(\"span\", {\n                  key: \"6\",\n                  style: {\n                    fontSize: '20px',\n                    marginBottom: '15px'\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 21\n                  }\n                }, \"Threat Type: \", newPlate.type), /*#__PURE__*/React.createElement(\"br\", {\n                  key: \"7\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 21\n                  }\n                }), /*#__PURE__*/React.createElement(\"span\", {\n                  key: \"8\",\n                  style: {\n                    fontSize: '20px',\n                    marginBottom: '15px'\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 21\n                  }\n                }, \"Location: \", newPlate.time), /*#__PURE__*/React.createElement(\"div\", {\n                  key: \"9\",\n                  style: {\n                    fontSize: '20px',\n                    marginTop: '35px',\n                    width: '100%',\n                    textAlign: 'center',\n                    display: 'flex',\n                    justiftContent: 'center',\n                    alignItems: 'center',\n                    alignContent: 'center'\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 21\n                  }\n                }, /*#__PURE__*/React.createElement(Button, {\n                  style: {\n                    color: '#fff'\n                  },\n                  onClick: this.props.openModal,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 23\n                  }\n                }, \"Load Emergency Contacts\"), /*#__PURE__*/React.createElement(Button, {\n                  style: {\n                    color: '#fff'\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 23\n                  }\n                }, \"Report Misread\"))],\n                activate: true,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 25\n                }\n              })\n            });\n          }\n\n          i++;\n        }\n\n        console.log('recognized a plate');\n        this.setState({\n          dataList: sorted,\n          triggerHighRisk: false\n        });\n      }\n\n      this.setState({\n        dataList: sorted,\n        loading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.socket.on('licensePlateRecognized', data => {\n      const img_data = data.data;\n      console.log(img_data);\n      console.log('socket triggered on frontend');\n      this.refresh(img_data ? img_data : null);\n    });\n    this.refresh(null); // this.intervalId = setInterval(this.refresh, 6000) // set interval to refresh data \n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId); // clear refreshing when the component dismounts\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: '28%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      type: \"Rings\",\n      color: accentColor,\n      secondaryColor: accentColor_secondary,\n      height: 400,\n      width: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    })) : [/*#__PURE__*/React.createElement(TableFixedHeader, {\n      dataList: this.state.dataList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    })], /*#__PURE__*/React.createElement(EmergencyContactsModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }), this.state.snackbar);\n  }\n\n}\n\nexport default activityLayout;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dailyActivity/activityLayout.js"],"names":["React","Component","TableFixedHeader","Snackbar","Button","Loader","io","EmergencyContactsModal","Axios","accentColor","accentColor_secondary","activityLayout","socket","connect","state","dataList","triggerHighRisk","mostRecentCriminalNumber","mostRecentCriminalType","mostRecentCriminalTime","snackbar","loading","schoolID","JSON","parse","localStorage","getItem","_id","refresh","src","console","log","data","get","rawData","filter","d","sorted","sort","a","b","date","time","currentList","length","num_new","i","newPlate","type","newPlateObj","setState","fontSize","marginBottom","color","height","width","plateNumber","marginTop","textAlign","display","justiftContent","alignItems","alignContent","props","openModal","componentDidMount","on","img_data","componentWillUnmount","clearInterval","intervalId","render","marginLeft"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,gBAAP,MAA6B,eAA7B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAO,+DAAP;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAOC,sBAAP,MAAmC,0CAAnC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAG,SAApB;AACA,MAAMC,qBAAqB,GAAG,SAA9B,C,CAEA;;AACA,MAAMC,cAAN,SAA6BV,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAKpCW,MALoC,GAK3BN,EAAE,CAACO,OAAH,CAAW,uBAAX,CAL2B;AAAA,SAUpCC,KAVoC,GAU5B;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,eAAe,EAAE,KAFX;AAGNC,MAAAA,wBAAwB,EAAE,EAHpB;AAINC,MAAAA,sBAAsB,EAAE,EAJlB;AAKNC,MAAAA,sBAAsB,EAAE,EALlB;AAMNC,MAAAA,QAAQ,EAAE,IANJ;AAONC,MAAAA,OAAO,EAAE;AAPH,KAV4B;AAAA,SAoBpCC,QApBoC,GAoBzBC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,EAA4CC,GApBnB;;AAAA,SAuBpCC,OAvBoC,GAuB1B,MAAMC,GAAN,IAAc;AAEtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAFsB,CAGtB;AACA;;AACA,UAAIC,IAAI,GAAG,MAAMxB,KAAK,CAACyB,GAAN,CAAU,yBAAV,CAAjB,CALsB,CAOtB;;AACA,UAAIC,OAAO,GAAGF,IAAI,CAACA,IAAnB;AACAE,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAgBC,CAAD,IAAO;AAC9B,eAAOA,CAAC,CAACd,QAAF,KAAe,KAAKA,QAA3B;AACD,OAFS,CAAV,CATsB,CAatB;;AACA,UAAIe,MAAM,GAAGH,OAAO,CAACI,IAAR,CAAa,CAACC,CAAD,EAAGC,CAAH,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAZ,GAAoB,CAApB,GAAwBF,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAd,GAAwBF,CAAC,CAACG,IAAF,GAASF,CAAC,CAACE,IAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhD,GAAoD,CAAC,CAAlG,CAAb;AACA,UAAIC,WAAW,GAAG,KAAK7B,KAAL,CAAWC,QAA7B,CAfsB,CAiBtB;;AACA,UAAG4B,WAAW,CAACC,MAAZ,IAAsBP,MAAM,CAACO,MAA7B,IAAuCD,WAAW,CAACC,MAAZ,IAAsB,CAAhE,EAAkE;AAE9D,cAAMC,OAAO,GAAGR,MAAM,CAACO,MAAP,GAAgBD,WAAW,CAACC,MAA5C;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Bc,OAA5B;AAEA,YAAIC,CAAC,GAAG,CAAR,CAL8D,CAM9D;;AACA,eAAMA,CAAC,GAAGD,OAAV,EAAkB;AAEhB,cAAIE,QAAQ,GAAGV,MAAM,CAACS,CAAD,CAArB;AACAhB,UAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ,EAHgB,CAKhB;AACA;;AACA,cAAGA,QAAQ,CAACC,IAAT,IAAiB,QAApB,EAA6B;AAE3B;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAIC,WAAW,GAAGF,QAAlB,CAT2B,CAU3B;;AAEAjB,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAEA,iBAAKmB,QAAL,CAAc;AACZlC,cAAAA,eAAe,EAAE,IADL;AAEZI,cAAAA,QAAQ,eAAE,oBAAC,QAAD;AACR,gBAAA,OAAO,EAAE,cACL;AAAM,kBAAA,GAAG,EAAC,GAAV;AAAc,kBAAA,KAAK,EAAE;AAAC+B,oBAAAA,QAAQ,EAAE,MAAX;AAAmBC,oBAAAA,YAAY,EAAE,MAAjC;AAAyCC,oBAAAA,KAAK,EAAE;AAAhD,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADK,eAEL;AAAI,kBAAA,GAAG,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFK,eAEa;AAAI,kBAAA,GAAG,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFb;AAAA;AAGL;AACA;AAAK,kBAAA,GAAG,EAAExB,GAAV;AAAe,kBAAA,KAAK,EAAE;AAACyB,oBAAAA,MAAM,EAAE,OAAT;AAAkBC,oBAAAA,KAAK,EAAE;AAAzB,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJK,eAKL;AAAM,kBAAA,GAAG,EAAC,GAAV;AAAc,kBAAA,KAAK,EAAE;AAACJ,oBAAAA,QAAQ,EAAE,MAAX;AAAmBC,oBAAAA,YAAY,EAAE;AAAjC,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAuEL,QAAQ,CAACS,WAAhF,CALK,eAML;AAAI,kBAAA,GAAG,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANK,eAOL;AAAM,kBAAA,GAAG,EAAC,GAAV;AAAc,kBAAA,KAAK,EAAE;AAACL,oBAAAA,QAAQ,EAAE,MAAX;AAAmBC,oBAAAA,YAAY,EAAE;AAAjC,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA6EL,QAAQ,CAACC,IAAtF,CAPK,eAQL;AAAI,kBAAA,GAAG,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARK,eASL;AAAM,kBAAA,GAAG,EAAC,GAAV;AAAc,kBAAA,KAAK,EAAE;AAACG,oBAAAA,QAAQ,EAAE,MAAX;AAAmBC,oBAAAA,YAAY,EAAE;AAAjC,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA0EL,QAAQ,CAACL,IAAnF,CATK,eAUL;AAAK,kBAAA,GAAG,EAAC,GAAT;AAAa,kBAAA,KAAK,EAAE;AAACS,oBAAAA,QAAQ,EAAE,MAAX;AAAmBM,oBAAAA,SAAS,EAAE,MAA9B;AAAsCF,oBAAAA,KAAK,EAAE,MAA7C;AAAqDG,oBAAAA,SAAS,EAAE,QAAhE;AAA0EC,oBAAAA,OAAO,EAAE,MAAnF;AAA2FC,oBAAAA,cAAc,EAAE,QAA3G;AAAqHC,oBAAAA,UAAU,EAAE,QAAjI;AAA2IC,oBAAAA,YAAY,EAAE;AAAzJ,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACE,oBAAC,MAAD;AAAQ,kBAAA,KAAK,EAAE;AAACT,oBAAAA,KAAK,EAAE;AAAR,mBAAf;AAAgC,kBAAA,OAAO,EAAE,KAAKU,KAAL,CAAWC,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADF,eAEE,oBAAC,MAAD;AAAQ,kBAAA,KAAK,EAAE;AAACX,oBAAAA,KAAK,EAAE;AAAR,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFF,CAVK,CADD;AAgBR,gBAAA,QAAQ,EAAE,IAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFE,aAAd;AAqBD;;AACDP,UAAAA,CAAC;AACF;;AACDhB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,aAAKmB,QAAL,CAAc;AAACnC,UAAAA,QAAQ,EAAEsB,MAAX;AAAmBrB,UAAAA,eAAe,EAAE;AAApC,SAAd;AACH;;AACD,WAAKkC,QAAL,CAAc;AAACnC,QAAAA,QAAQ,EAAEsB,MAAX;AAAmBhB,QAAAA,OAAO,EAAE;AAA5B,OAAd;AACD,KAjGmC;AAAA;;AAmGpC4C,EAAAA,iBAAiB,GAAE;AAEjB,SAAKrD,MAAL,CAAYsD,EAAZ,CAAe,wBAAf,EAA0ClC,IAAD,IAAU;AAEjD,YAAMmC,QAAQ,GAAGnC,IAAI,CAACA,IAAtB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYoC,QAAZ;AAEArC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,WAAKH,OAAL,CAAauC,QAAQ,GAAGA,QAAH,GAAc,IAAnC;AACD,KAPD;AASA,SAAKvC,OAAL,CAAa,IAAb,EAXiB,CAYjB;AACD;;AAEDwC,EAAAA,oBAAoB,GAAE;AAClBC,IAAAA,aAAa,CAAC,KAAKC,UAAN,CAAb,CADkB,CACa;AAClC;;AAEDC,EAAAA,MAAM,GAAE;AAEN,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzD,KAAL,CAAWO,OAAX,gBACC;AAAK,MAAA,KAAK,EAAE;AAACmD,QAAAA,UAAU,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACA,MAAA,IAAI,EAAC,OADL;AAEA,MAAA,KAAK,EAAE/D,WAFP;AAGA,MAAA,cAAc,EAAEC,qBAHhB;AAIA,MAAA,MAAM,EAAE,GAJR;AAKA,MAAA,KAAK,EAAE,GALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,GAWC,cACA,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAE,KAAKI,KAAL,CAAWC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAZN,eAgBI,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBJ,EAiBK,KAAKD,KAAL,CAAWM,QAjBhB,CADJ;AAqBC;;AA7IiC;;AAgJtC,eAAeT,cAAf","sourcesContent":["import React, {Component} from 'react'\nimport TableFixedHeader from './completeLog'\nimport Snackbar from '../snackbar/snackbar'\nimport Button from '@material-ui/core/Button'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport io from 'socket.io-client'\n\nimport EmergencyContactsModal from '../dashboard/dashboardElements/emergency'\n\nimport Axios from 'axios'\n\nconst accentColor = '#1C63CD'\nconst accentColor_secondary = '#FD663A'\n\n// component to show the high risk activity as well as the parent activity \nclass activityLayout extends Component{\n\n  // initialize a socket for webhooks\n  // used to update what is rendered after a new license plate is found \n  // TODO: update with url of server on heroku \n  socket = io.connect('http://localhost:8000')\n\n  // // used for refreshing the data \n  // intervalId\n\n  state = {\n    dataList: [],\n    triggerHighRisk: false,\n    mostRecentCriminalNumber: '',\n    mostRecentCriminalType: '',\n    mostRecentCriminalTime: '',\n    snackbar: null,\n    loading: true   \n  }\n  \n  schoolID = JSON.parse(localStorage.getItem('userObj'))._id\n  \n  // check to see if there are new plates entering the school \n  refresh = async(src) => {\n    \n    console.log('instance of refresh')\n    // get all feed data (parents and high risk) from the database\n    // database is updated in the Python program so Mongo collection may or may not be updated on each cycle\n    let data = await Axios.get('/api/lpr/getGeneralData')\n\n    // filter the data so the user only sees school specific plates \n    let rawData = data.data\n    rawData = rawData.filter((d) => {\n      return d.schoolID === this.schoolID\n    })\n    \n    // sort the data by time \n    let sorted = rawData.sort((a,b) => (a.date < b.date) ? 1: (a.date === b.date) ? ((a.time < b.time) ? 1 : -1): -1)\n    let currentList = this.state.dataList\n\n    // go through the new additions to the database \n    if(currentList.length != sorted.length && currentList.length != 0){\n\n        const num_new = sorted.length - currentList.length \n        console.log('New Plates: ', num_new)\n\n        let i = 0\n        // cycle through each new plate recognized \n        while(i < num_new){\n\n          let newPlate = sorted[i]\n          console.log(newPlate)\n\n          // new plate recognized is a high risk plate\n          // if this is the case, trigger the snackbar to show the data for the high risk plate recognized\n          if(newPlate.type != 'Parent'){\n\n            // TODO: render image data to frontend \n            // let binaryImageEncoding = newPlate.imageData\n            // let recognized_plate_img = new Image()\n            // let src = 'data:image/png;base64,' + binaryImageEncoding\n            // console.log(src)\n            // recognized_plate_img.src = src \n\n            let newPlateObj = newPlate\n            // localStorage.setItem('lastHighRisk', JSON.stringify(newPlateObj))\n\n            console.log('trigger high risk modal')\n\n            this.setState({\n              triggerHighRisk: true,\n              snackbar: <Snackbar\n                message={[\n                    <span key=\"1\" style={{fontSize: '24px', marginBottom: '25px', color: ''}}>High Risk Plate Detected</span>,\n                    <br key=\"2\"></br>,<br key=\"3\"></br>,\n                    // recognized_plate_img,\n                    <img src={src} style={{height: '400px', width: 'auto'}}></img>,\n                    <span key=\"4\" style={{fontSize: '20px', marginBottom: '15px'}}>Plate: {newPlate.plateNumber}</span>,\n                    <br key=\"5\"></br>,\n                    <span key=\"6\" style={{fontSize: '20px', marginBottom: '15px'}}>Threat Type: {newPlate.type}</span>,\n                    <br key=\"7\" ></br>,\n                    <span key=\"8\" style={{fontSize: '20px', marginBottom: '15px'}}>Location: {newPlate.time}</span>,\n                    <div key=\"9\" style={{fontSize: '20px', marginTop: '35px', width: '100%', textAlign: 'center', display: 'flex', justiftContent: 'center', alignItems: 'center', alignContent: 'center' }}>\n                      <Button style={{color: '#fff'}} onClick={this.props.openModal}>Load Emergency Contacts</Button>\n                      <Button style={{color: '#fff'}}>Report Misread</Button>\n                    </div>\n                ]}\n                activate={true}>\n            </Snackbar>\n            })\n          }\n          i++\n        }\n        console.log('recognized a plate')\n        this.setState({dataList: sorted, triggerHighRisk: false})\n    }\n    this.setState({dataList: sorted, loading: false})\n  }\n\n  componentDidMount(){\n\n    this.socket.on('licensePlateRecognized', (data) => {\n\n      const img_data = data.data\n      console.log(img_data)\n\n      console.log('socket triggered on frontend')\n      this.refresh(img_data ? img_data : null)\n    })\n\n    this.refresh(null)\n    // this.intervalId = setInterval(this.refresh, 6000) // set interval to refresh data \n  }\n\n  componentWillUnmount(){\n      clearInterval(this.intervalId) // clear refreshing when the component dismounts\n  }\n\n  render(){\n    \n    return(\n        <div>\n            {this.state.loading ? \n              <div style={{marginLeft: '28%'}}>\n                <Loader\n                type=\"Rings\"\n                color={accentColor}\n                secondaryColor={accentColor_secondary}\n                height={400}\n                width={400}\n                />\n              </div>\n              :\n              [\n              <TableFixedHeader dataList={this.state.dataList}/>\n              ]\n            }\n            <EmergencyContactsModal/>\n            {this.state.snackbar}\n        </div>\n       )\n    }\n}\n\nexport default activityLayout"]},"metadata":{},"sourceType":"module"}