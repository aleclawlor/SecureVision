{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/mainFeed.js\";\nimport React, { Component } from 'react';\nimport ReactPlayer from 'react-player';\nimport Paper from '@material-ui/core/Paper';\nimport { Button } from '@material-ui/core';\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst videoSrc = require('./plateTest.mp4');\n\nclass MainFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n\n    this.detectFromVideoFrame = (model, video) => {\n      model.detect(video).then(predictions => {\n        this.showDetections(predictions, video);\n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      source: this.props.source,\n      name: this.props.name,\n      port: this.props.port,\n      buttonNames: this.props.buttonNames\n    };\n  }\n\n  componentDidMount() {\n    const loadlModelPromise = cocoSsd.load(); // resolve all the Promises\n\n    Promise.all([loadlModelPromise]).then(values => {\n      this.detectFromVideoFrame(values[0], this.videoRef.current);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  render() {\n    let player = {\n      marginTop: '5px'\n    };\n    let buttonGridStyle = {\n      width: '700px',\n      height: '200px',\n      textAlign: 'center'\n    };\n    let buttons = {\n      marginLeft: '15px',\n      width: '670px',\n      height: '180px',\n      display: 'grid',\n      gridTemplateColumns: 'repeat(6, 111.66px)'\n    };\n    const styles = {\n      position: 'fixed',\n      top: 150,\n      left: 150\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '700px',\n        height: '420px',\n        backgroundColor: '#333'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      src: videoSrc,\n      ref: this.videoRef,\n      width: \"100%\",\n      height: \"100%\",\n      autoplay: true,\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      style: styles,\n      ref: this.canvasRef,\n      width: \"720\",\n      height: \"650\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        marginLeft: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.name)), React.createElement(\"div\", {\n      style: buttonGridStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.state.buttonNames.map(d => {\n      console.log(d);\n      return React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, d);\n    })))));\n  }\n\n}\n\nexport default MainFeed;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/mainFeed.js"],"names":["React","Component","ReactPlayer","Paper","Button","cocoSsd","require","videoSrc","MainFeed","videoRef","createRef","canvasRef","detectFromVideoFrame","model","video","detect","then","predictions","showDetections","requestAnimationFrame","error","console","state","source","props","name","port","buttonNames","componentDidMount","loadlModelPromise","load","Promise","all","values","current","catch","render","player","marginTop","buttonGridStyle","width","height","textAlign","buttons","marginLeft","display","gridTemplateColumns","styles","position","top","left","backgroundColor","map","d","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactPlayer from 'react-player'\nimport Paper from '@material-ui/core/Paper'\nimport { Button } from '@material-ui/core'\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst videoSrc = require('./plateTest.mp4')\n\nclass MainFeed extends Component{\n\n    videoRef = React.createRef();\n    canvasRef = React.createRef();\n\n    detectFromVideoFrame = (model, video) => {\n        model.detect(video).then(predictions => {\n          this.showDetections(predictions, video);\n          requestAnimationFrame(() => {\n            this.detectFromVideoFrame(model, video);\n          });\n        }, (error) => {\n          console.error(error)\n        });\n      };\n\n    state = {\n        source: this.props.source,\n        name: this.props.name,\n        port: this.props.port,\n        buttonNames: this.props.buttonNames\n    }  \n\n    componentDidMount(){\n        const loadlModelPromise = cocoSsd.load();\n\n      // resolve all the Promises\n        Promise.all([loadlModelPromise])\n            .then(values => {\n            this.detectFromVideoFrame(values[0], this.videoRef.current);\n            })\n            .catch(error => {\n            console.error(error);\n            });\n    }\n\n    render(){\n\n        let player = {\n            marginTop: '5px'\n        }\n\n        let buttonGridStyle={\n            width: '700px',\n            height: '200px',\n            textAlign:'center'\n        }\n\n        let buttons = {\n            marginLeft: '15px', \n            width: '670px', \n            height:'180px', \n            display: 'grid',\n            gridTemplateColumns: 'repeat(6, 111.66px)'\n        }\n\n        const styles = {\n            position: 'fixed',\n            top: 150,\n            left: 150,\n          };\n\n        return(\n            <div>\n                <div style={{width: '700px', height: '420px', backgroundColor: '#333'}}>\n                    {/* <ReactPlayer url={'https://www.youtube.com/watch?v=F4SY7kTpqjk'} playing muted controls={false} className={player} width=\"100%\" height=\"100%\"/> */}\n                    <video src={videoSrc} ref={this.videoRef} width=\"100%\" height=\"100%\" autoplay controls></video>\n                    <canvas style={styles} ref={this.canvasRef} width=\"720\" height=\"650\" />\n                    <div style={{marginTop: '15px'}}>\n                        <h1 style={{marginLeft: '15px'}}>{this.state.name}</h1>\n                    </div>\n                    <div style={buttonGridStyle}>\n                        <div style={buttons}>\n                            {this.state.buttonNames.map((d) => {\n                                console.log(d)\n                             return <Button>{d}</Button>\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainFeed"]},"metadata":{},"sourceType":"module"}