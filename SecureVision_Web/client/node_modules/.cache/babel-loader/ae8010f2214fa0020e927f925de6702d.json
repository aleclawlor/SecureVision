{"ast":null,"code":"const Axios = require('axios');\n\nconst Tesseract = require('tesseract.js');\n\nmodule.exports = async () => {\n  // testing images and videos\n  const carsTest = require('../cameraFeed/carsTest.mp4');\n\n  const testPlate = require('./testPlate.jpg');\n\n  const testPlate1 = require('./testPlate1.jpg');\n\n  const testCars = require('./testCars.jpeg');\n\n  const cocoSsd = require('@tensorflow-models/coco-ssd');\n\n  const modelTest = require('./testingModel.jpg');\n\n  const securityTest = require('./security.mp4');\n\n  let video = document.createElement('VIDEO');\n  video.setAttribute('autoplay', 'true');\n  video.setAttribute('controls', 'controls');\n  video.src = securityTest;\n  let canvas = document.createElement('canvas');\n  let context = canvas.getContext('2d');\n  context.globalCompositeOperation = 'difference';\n  let unrecognizedList = []; // load TensorFlow model\n\n  const model = cocoSsd.load();\n\n  const sendImage = async () => {\n    // get screenshot from current video \n    context.drawImage(video, 0, 0, 640, 480);\n    let dataUrl = canvas.toDataURL();\n    let currentFrame = new Image();\n    currentFrame.src = modelTest;\n    currentFrame.width = 400;\n    currentFrame.height = 400;\n    let bufferCanvas = document.createElement('canvas');\n    bufferCanvas.width = 400;\n    bufferCanvas.height = 400;\n    let bufferContext = bufferCanvas.getContext('2d'); // classify image\n\n    const predictions = await model.detect(currentFrame);\n    console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized');\n\n    if (predictions.length) {\n      predictions.forEach(d => {\n        if (d.class === \"car\") {\n          console.log(d.bbox);\n          document.body.appendChild(currentFrame);\n          const testImgDiv = document.createElement('div');\n          testImgDiv.setAttribute('width', '400px');\n          testImgDiv.setAttribute('height', '400px');\n          testImgDiv.setAttribute('backgroundImage', modelTest);\n          bufferContext.drawImage(currentFrame, 200, 200, 50, 50);\n          document.body.appendChild(bufferContext.toDataURL()); // document.body.appendChild(testImgDiv)\n        }\n      });\n    } // Tesseract.recognize(\n    //     testPlate,\n    //     'eng'\n    // ).then(({ data: { text }} ) => {\n    //     console.log(\"Recognized text: \", text)\n    // })\n    // for each video in the current list of video endpoints\n    // check db for the plate\n    // if unrecognized, send to db and alert \n\n\n    let currentPlateNumber = '123456'; // eventually changed to get unrecognized plates from db \n\n    if (!unrecognizedList.includes(currentPlateNumber)) {\n      let response = Axios.post('/api/unrecognized/addUnrecognized', {\n        plateNumber: currentPlateNumber\n      });\n      console.log(response);\n      unrecognizedList.push(currentPlateNumber);\n    }\n\n    setTimeout(sendImage, 10000);\n  };\n}; // module.exports = sendImage","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dashboard/sendFeed.js"],"names":["Axios","require","Tesseract","module","exports","carsTest","testPlate","testPlate1","testCars","cocoSsd","modelTest","securityTest","video","document","createElement","setAttribute","src","canvas","context","getContext","globalCompositeOperation","unrecognizedList","model","load","sendImage","drawImage","dataUrl","toDataURL","currentFrame","Image","width","height","bufferCanvas","bufferContext","predictions","detect","console","log","length","forEach","d","class","bbox","body","appendChild","testImgDiv","currentPlateNumber","includes","response","post","plateNumber","push","setTimeout"],"mappings":"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","sourcesContent":["const Axios = require('axios')\nconst Tesseract = require('tesseract.js')\n\nmodule.exports = async() => {\n// testing images and videos\nconst carsTest = require('../cameraFeed/carsTest.mp4')\nconst testPlate = require('./testPlate.jpg')\nconst testPlate1 = require('./testPlate1.jpg')\nconst testCars = require('./testCars.jpeg')\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst modelTest = require('./testingModel.jpg')\nconst securityTest = require('./security.mp4')\n\nlet video = document.createElement('VIDEO')\nvideo.setAttribute('autoplay', 'true')\nvideo.setAttribute('controls', 'controls')\n\nvideo.src = securityTest\n\nlet canvas = document.createElement('canvas')\nlet context = canvas.getContext('2d')\ncontext.globalCompositeOperation = 'difference'\n\nlet unrecognizedList = []\n\n// load TensorFlow model\nconst model = cocoSsd.load()\n\nconst sendImage = async() => {\n\n    // get screenshot from current video \n    context.drawImage(video, 0, 0, 640, 480)\n    let dataUrl = canvas.toDataURL()\n\n    let currentFrame = new Image()\n    currentFrame.src = modelTest\n    currentFrame.width = 400\n    currentFrame.height = 400\n\n    let bufferCanvas = document.createElement('canvas')\n    bufferCanvas.width = 400\n    bufferCanvas.height = 400\n    let bufferContext = bufferCanvas.getContext('2d')\n    \n    // classify image\n    const predictions = await model.detect(currentFrame)\n\n    console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized')\n    if(predictions.length){\n        predictions.forEach((d) => {\n            if(d.class === \"car\"){\n            console.log(d.bbox)\n            document.body.appendChild(currentFrame)\n            \n            const testImgDiv = document.createElement('div')\n            testImgDiv.setAttribute('width', '400px')\n            testImgDiv.setAttribute('height', '400px')\n            testImgDiv.setAttribute('backgroundImage', modelTest)\n\n            bufferContext.drawImage(currentFrame, 200, 200, 50, 50)\n            document.body.appendChild(bufferContext.toDataURL())\n\n            // document.body.appendChild(testImgDiv)\n            }\n        })\n    }\n    \n    // Tesseract.recognize(\n    //     testPlate,\n    //     'eng'\n    // ).then(({ data: { text }} ) => {\n    //     console.log(\"Recognized text: \", text)\n    // })\n\n    // for each video in the current list of video endpoints\n\n    // check db for the plate\n\n    // if unrecognized, send to db and alert \n\n    let currentPlateNumber = '123456'\n\n    // eventually changed to get unrecognized plates from db \n\n    if(!(unrecognizedList.includes(currentPlateNumber))){\n\n        let response = Axios.post('/api/unrecognized/addUnrecognized', {\n            plateNumber: currentPlateNumber\n        })\n\n        console.log(response)\n        unrecognizedList.push(currentPlateNumber)\n    }\n\n    setTimeout(sendImage, 10000)\n}   \n}\n\n// module.exports = sendImage"]},"metadata":{},"sourceType":"module"}