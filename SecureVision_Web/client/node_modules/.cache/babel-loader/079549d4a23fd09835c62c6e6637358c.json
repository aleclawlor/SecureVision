{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/mainFeed.js\";\nimport React, { Component } from 'react';\nimport ReactPlayer from 'react-player';\nimport Paper from '@material-ui/core/Paper';\nimport { Button } from '@material-ui/core';\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst videoSrc = require('./plateTest.mp4');\n\nclass MainFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      source: this.props.source,\n      name: this.props.name,\n      port: this.props.port,\n      buttonNames: this.props.buttonNames,\n      videoRef: React.createRef(),\n      canvasRef: React.createRef(),\n      finished: false\n    };\n\n    this.showDetections = (predictions, video) => {\n      const ctx = this.state.canvasRef.current.getContext(\"2d\");\n      let vid = this.videoRef.current;\n\n      vid.onended = () => {\n        this.finished = true;\n        alert(\"video has ended\");\n      };\n\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const font = \"24px helvetica\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n      predictions.forEach(prediction => {\n        if (this.finished) {\n          return;\n        }\n\n        console.log(prediction);\n\n        if (prediction.class === 'car' || prediction.class === 'motorcycle' || prediction.class === 'truck' || prediction.class === 'bus') {\n          const x = prediction.bbox[0];\n          const y = prediction.bbox[1];\n          const width = prediction.bbox[2];\n          const height = prediction.bbox[3]; //   // Draw the bounding box.\n          //   ctx.strokeStyle = \"#FF7801\";\n          //   ctx.lineWidth = 1;\n          //   ctx.strokeRect(x, y, width, height);\n          //   // Draw the label background.\n          //   ctx.fillStyle = \"#FF7801\";\n          //   const textWidth = ctx.measureText(prediction.class).width;\n          //   const textHeight = parseInt(font, 10);\n          //   // draw top left rectangle\n          //   ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n          //   // draw bottom left rectangle\n          //   ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n          //   ctx.fillStyle = \"#000000\";\n          //   ctx.fillText(prediction.class, x, y);\n          //   ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n\n          let tempCanvas = document.createElement('canvas');\n          let tempContext = tempCanvas.getContext('2d');\n          tempContext.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height);\n          let imageData = tempContext.getImageData(x, y, width, height); // let contrastData = this.imageContrast(imageData, 120)\n          // let grayScaleData = this.imageGrayScale(contrastData, tempCanvas.width, tempCanvas.height)\n          // let thresholdData = this.imageThreshold(grayScaleData, 170)  \n\n          tempContext.putImageData(imageData, 0, 0);\n          let currentCar = new Image();\n          currentCar.src = tempCanvas.toDataURL('image/png');\n          document.body.append(currentCar); // this.characterRecognize(currentCar)\n        }\n      });\n    };\n\n    this.detectFromVideoFrame = (model, video) => {\n      model.detect(video).then(predictions => {\n        this.showDetections(predictions, video);\n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n  }\n\n  componentDidMount() {\n    const loadlModelPromise = cocoSsd.load(); // resolve all the Promises\n\n    Promise.all([loadlModelPromise]).then(values => {\n      this.detectFromVideoFrame(values[0], this.state.videoRef.current);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  render() {\n    let player = {\n      marginTop: '5px'\n    };\n    let buttonGridStyle = {\n      width: '700px',\n      height: '200px',\n      textAlign: 'center'\n    };\n    let buttons = {\n      marginLeft: '15px',\n      width: '670px',\n      height: '180px',\n      display: 'grid',\n      gridTemplateColumns: 'repeat(6, 111.66px)'\n    };\n    const styles = {\n      position: 'fixed',\n      top: 150,\n      left: 150\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '700px',\n        height: '420px',\n        backgroundColor: '#333'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      src: videoSrc,\n      ref: this.state.videoRef,\n      width: \"100%\",\n      height: \"100%\",\n      autoplay: true,\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      style: styles,\n      ref: this.state.canvasRef,\n      width: \"720\",\n      height: \"650\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        marginLeft: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.name)), React.createElement(\"div\", {\n      style: buttonGridStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.buttonNames.map(d => {\n      console.log(d);\n      return React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, d);\n    })))));\n  }\n\n}\n\nexport default MainFeed;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/mainFeed.js"],"names":["React","Component","ReactPlayer","Paper","Button","cocoSsd","require","videoSrc","MainFeed","state","source","props","name","port","buttonNames","videoRef","createRef","canvasRef","finished","showDetections","predictions","video","ctx","current","getContext","vid","onended","alert","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","console","log","class","x","bbox","y","tempCanvas","document","createElement","tempContext","drawImage","imageData","getImageData","putImageData","currentCar","Image","src","toDataURL","body","append","detectFromVideoFrame","model","detect","then","requestAnimationFrame","error","componentDidMount","loadlModelPromise","load","Promise","all","values","catch","render","player","marginTop","buttonGridStyle","textAlign","buttons","marginLeft","display","gridTemplateColumns","styles","position","top","left","backgroundColor","map","d"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactPlayer from 'react-player'\nimport Paper from '@material-ui/core/Paper'\nimport { Button } from '@material-ui/core'\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst videoSrc = require('./plateTest.mp4')\n\nclass MainFeed extends Component{\n\nstate = {\n        source: this.props.source,\n        name: this.props.name,\n        port: this.props.port,\n        buttonNames: this.props.buttonNames,\n        videoRef: React.createRef(),\n        canvasRef: React.createRef(),\n        finished: false\n  }  \n\n  showDetections = (predictions, video) => {\n    const ctx = this.state.canvasRef.current.getContext(\"2d\");\n    \n    let vid = this.videoRef.current\n    vid.onended = () => {\n      this.finished = true \n      alert(\"video has ended\")\n    }\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const font = \"24px helvetica\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n\n    if(this.finished){\n      return \n    }\n\n      console.log(prediction)\n\n      if(prediction.class === 'car' || prediction.class === 'motorcycle' || prediction.class === 'truck' || prediction.class === 'bus'){\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n    //   // Draw the bounding box.\n    //   ctx.strokeStyle = \"#FF7801\";\n    //   ctx.lineWidth = 1;\n    //   ctx.strokeRect(x, y, width, height);\n    //   // Draw the label background.\n    //   ctx.fillStyle = \"#FF7801\";\n    //   const textWidth = ctx.measureText(prediction.class).width;\n    //   const textHeight = parseInt(font, 10);\n    //   // draw top left rectangle\n    //   ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n    //   // draw bottom left rectangle\n    //   ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n\n    //   ctx.fillStyle = \"#000000\";\n    //   ctx.fillText(prediction.class, x, y);\n    //   ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n\n      let tempCanvas = document.createElement('canvas')\n      let tempContext = tempCanvas.getContext('2d')\n      tempContext.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height)\n      let imageData = tempContext.getImageData(x, y, width, height)\n      \n      // let contrastData = this.imageContrast(imageData, 120)\n      // let grayScaleData = this.imageGrayScale(contrastData, tempCanvas.width, tempCanvas.height)\n      // let thresholdData = this.imageThreshold(grayScaleData, 170)  \n      tempContext.putImageData(imageData, 0, 0)\n\n      let currentCar = new Image()\n      currentCar.src = tempCanvas.toDataURL('image/png')\n      document.body.append(currentCar)\n      // this.characterRecognize(currentCar)\n      }\n    });\n  };\n\n    detectFromVideoFrame = (model, video) => {\n        model.detect(video).then(predictions => {\n          this.showDetections(predictions, video);\n          requestAnimationFrame(() => {\n            this.detectFromVideoFrame(model, video);\n          });\n        }, (error) => {\n          console.error(error)\n        });\n      };\n\n    componentDidMount(){\n        const loadlModelPromise = cocoSsd.load();\n\n      // resolve all the Promises\n        Promise.all([loadlModelPromise])\n            .then(values => {\n            this.detectFromVideoFrame(values[0], this.state.videoRef.current);\n            })\n            .catch(error => {\n            console.error(error);\n            });\n    }\n\n    render(){\n\n        let player = {\n            marginTop: '5px'\n        }\n\n        let buttonGridStyle={\n            width: '700px',\n            height: '200px',\n            textAlign:'center'\n        }\n\n        let buttons = {\n            marginLeft: '15px', \n            width: '670px', \n            height:'180px', \n            display: 'grid',\n            gridTemplateColumns: 'repeat(6, 111.66px)'\n        }\n\n        const styles = {\n            position: 'fixed',\n            top: 150,\n            left: 150,\n          };\n\n        return(\n            <div>\n                <div style={{width: '700px', height: '420px', backgroundColor: '#333'}}>\n                    {/* <ReactPlayer url={'https://www.youtube.com/watch?v=F4SY7kTpqjk'} playing muted controls={false} className={player} width=\"100%\" height=\"100%\"/> */}\n                    <video src={videoSrc} ref={this.state.videoRef} width=\"100%\" height=\"100%\" autoplay controls></video>\n                    <canvas style={styles} ref={this.state.canvasRef} width=\"720\" height=\"650\" />\n                    <div style={{marginTop: '15px'}}>\n                        <h1 style={{marginLeft: '15px'}}>{this.state.name}</h1>\n                    </div>\n                    <div style={buttonGridStyle}>\n                        <div style={buttons}>\n                            {this.state.buttonNames.map((d) => {\n                                console.log(d)\n                             return <Button>{d}</Button>\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainFeed"]},"metadata":{},"sourceType":"module"}