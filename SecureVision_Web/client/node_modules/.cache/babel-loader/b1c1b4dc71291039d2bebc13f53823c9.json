{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/configuration/addCameraModal.js\";\nimport React, { Component } from 'react';\nimport Modal from '../material/modal';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport Snack from '../snackbar/snackbar';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst Axios = require('axios');\n\nconst accentColor = '#1C63CD'; // modal to trigger when adding a new camera feed\n\nclass addCameraModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.socket = io.connect('http://localhost:8000');\n    this.state = {\n      source: '',\n      name: '',\n      port: '',\n      loading: true\n    };\n\n    this.handleFormSubmit = () => {\n      // clear the 'error' snackbar \n      this.setState({\n        errorSnack: null\n      }); // if the source, name, and/or port are not specified, trigger and error and don't add the camera\n\n      if (!this.state.source || !this.state.name || !this.state.port) {\n        this.setState({\n          errorSnack: /*#__PURE__*/React.createElement(Snack, {\n            activate: true,\n            message: \"Please fill all input fields\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 40\n            }\n          })\n        });\n        return; // return from function before adding the incomplete data to the database\n      }\n\n      const id = JSON.parse(localStorage.getItem('userObj'))._id; // post added camera to db \n\n\n      let req = Axios.post('/api/cameras/registerCamera', {\n        source: this.state.source,\n        name: this.state.name,\n        port: this.state.port,\n        id: id\n      }); // trigger the refresh callback to update shown cameras and include newly added one \n\n      this.props.refresh(); // tell the python program that a new camera has been added\n      // when the connection in python triggers, it sends a call to mongo to get the most recently added camera\n\n      this.socket.emit('cameraAdded', {\n        state: this.state\n      }); // close the camera add modal \n\n      this.setState({\n        open: false\n      });\n      this.props.onClose();\n    };\n\n    this.updateSource = event => {\n      this.setState({\n        source: event.target.value\n      });\n    };\n\n    this.updateName = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.updatePort = event => {\n      this.setState({\n        port: event.target.value\n      });\n    };\n\n    this.triggerClose = () => {\n      this.props.onClose();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Modal, {\n      title: \"Register a new camera\",\n      shouldOpen: this.props.open,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '50%',\n        lineHeight: '65px',\n        color: '#000A40'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      color: accentColor,\n      label: \"IP Address\",\n      style: {\n        width: '100%',\n        fill: '#000A40'\n      },\n      variant: \"outlined\",\n      value: this.state.source,\n      onChange: this.updateSource,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      color: accentColor,\n      label: \"Name\",\n      style: {\n        width: '100%',\n        color: '#000A40'\n      },\n      variant: \"outlined\",\n      value: this.state.name,\n      onChange: this.updateName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      color: accentColor,\n      label: \"Port\",\n      style: {\n        width: '100%',\n        color: '#000A40'\n      },\n      variant: \"outlined\",\n      value: this.state.port,\n      onChange: this.updatePort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: accentColor,\n        fontWeight: 550\n      },\n      onClick: () => {\n        this.handleFormSubmit();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: accentColor,\n        fontWeight: 550\n      },\n      onClick: () => {\n        this.triggerClose();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"Cancel\"), this.state.errorSnack);\n  }\n\n}\n\nexport default addCameraModal;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/configuration/addCameraModal.js"],"names":["React","Component","Modal","Button","TextField","Snack","Axios","require","accentColor","addCameraModal","socket","io","connect","state","source","name","port","loading","handleFormSubmit","setState","errorSnack","id","JSON","parse","localStorage","getItem","_id","req","post","props","refresh","emit","open","onClose","updateSource","event","target","value","updateName","updatePort","triggerClose","render","width","lineHeight","color","fill","fontWeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Modal from '../material/modal'\nimport Button from '@material-ui/core/Button'\nimport { TextField } from '@material-ui/core'\nimport Snack from '../snackbar/snackbar'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nconst Axios = require('axios')\n\nconst accentColor = '#1C63CD'\n\n// modal to trigger when adding a new camera feed\nclass addCameraModal extends Component{\n\n     // initialize a socket for webhooks\n    // used to update what is rendered after a new license plate is found \n    // TODO: update with url of server on heroku \n    socket = io.connect('http://localhost:8000')\n\n    state = {\n        source: '',\n        name: '',\n        port: '',\n        loading: true \n    }\n\n    // submit function for when a user adds a new camrea to the database \n    handleFormSubmit = () => {\n\n        // clear the 'error' snackbar \n        this.setState({errorSnack: null})\n\n        // if the source, name, and/or port are not specified, trigger and error and don't add the camera\n        if(!this.state.source || !this.state.name || !this.state.port){\n            this.setState({errorSnack: <Snack activate={true} message=\"Please fill all input fields\"/>})\n            return  // return from function before adding the incomplete data to the database\n        }\n\n        const id = JSON.parse(localStorage.getItem('userObj'))._id\n\n        // post added camera to db \n        let req = Axios.post('/api/cameras/registerCamera', {\n            source: this.state.source,\n            name: this.state.name,\n            port: this.state.port,\n            id: id \n        })\n        \n        // trigger the refresh callback to update shown cameras and include newly added one \n        this.props.refresh()\n\n        // tell the python program that a new camera has been added\n        // when the connection in python triggers, it sends a call to mongo to get the most recently added camera\n        this.socket.emit('cameraAdded', ({\n            state: this.state\n        }))\n\n        // close the camera add modal \n        this.setState({open: false})\n        this.props.onClose()\n    }\n\n    // update entered info to component state \n    updateSource = (event) => {\n        this.setState({source: event.target.value})\n    }\n    \n    updateName = (event) => {\n        this.setState({name: event.target.value})\n    }\n\n    updatePort = (event) => {\n        this.setState({port: event.target.value})\n    }\n\n    triggerClose = () => {\n        this.props.onClose()\n    }\n\n    render(){\n        return(\n            <Modal title=\"Register a new camera\" shouldOpen={this.props.open}>\n                <div style={{width: '50%', lineHeight: '65px', color: '#000A40'}}>\n                    <TextField color={accentColor} label=\"IP Address\" style={{width: '100%', fill: '#000A40'}} variant=\"outlined\" value={this.state.source} onChange={this.updateSource}></TextField>\n                    <TextField color={accentColor} label=\"Name\" style={{width: '100%', color: '#000A40'}} variant=\"outlined\" value={this.state.name} onChange={this.updateName}></TextField>\n                    <TextField color={accentColor} label=\"Port\" style={{width: '100%', color: '#000A40'}} variant=\"outlined\" value={this.state.port} onChange={this.updatePort}></TextField>\n                </div>\n                <Button style={{color: accentColor, fontWeight: 550}} onClick = {() => {this.handleFormSubmit()}}>Submit</Button>\n                <Button style={{color: accentColor, fontWeight: 550}} onClick = {() => {this.triggerClose()}}>Cancel</Button>\n                {this.state.errorSnack}\n            </Modal>\n        )\n    }\n}\n\nexport default addCameraModal"]},"metadata":{},"sourceType":"module"}