{"ast":null,"code":"const Axios = require('axios');\n\nconst Tesseract = require('tesseract.js'); // testing images and videos\n\n\nconst carsTest = require('../cameraFeed/carsTest.mp4');\n\nconst testPlate = require('./testPlate.jpg');\n\nconst testPlate1 = require('./testPlate1.jpg');\n\nconst testCars = require('./testCars.jpeg');\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst modelTest = require('./testingModel.jpg');\n\nconst securityTest = require('./security.mp4');\n\nlet video = document.createElement('VIDEO');\nvideo.setAttribute('autoplay', 'true');\nvideo.setAttribute('controls', 'controls');\nvideo.src = securityTest;\nlet unrecognizedList = [];\nbufferContext.drawImage(canvas, 400, 400);\n\nconst sendImage = async () => {\n  // get screenshot from current video \n  let dataUrl = canvas.toDataURL(); // load TensorFlow model\n\n  const model = await cocoSsd.load(); // classify image\n\n  const predictions = await model.detect(currentFrame);\n  console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized');\n\n  if (predictions.length) {\n    predictions.forEach(d => {\n      if (d.class === \"car\") {\n        console.log(d.bbox);\n        let currentFrame = new Image();\n        currentFrame.src = modelTest;\n        currentFrame.width = 400;\n        currentFrame.height = 400;\n        let canvas = document.createElement('canvas');\n        canvas.width = 400;\n        canvas.height = 400;\n        canvas.getContext('2d').drawImage(currentFrame, 0, 0);\n        let buffer = document.createElement('canvas');\n        let bufferContext = buffer.getContext('2d');\n        buffer.width = 400;\n        buffer.height = 400;\n        document.body.appendChild(buffer);\n      }\n    });\n  } // Tesseract.recognize(\n  //     testPlate,\n  //     'eng'\n  // ).then(({ data: { text }} ) => {\n  //     console.log(\"Recognized text: \", text)\n  // })\n  // for each video in the current list of video endpoints\n  // check db for the plate\n  // if unrecognized, send to db and alert \n\n\n  let currentPlateNumber = '123456'; // eventually changed to get unrecognized plates from db \n\n  if (!unrecognizedList.includes(currentPlateNumber)) {\n    let response = Axios.post('/api/unrecognized/addUnrecognized', {\n      plateNumber: currentPlateNumber\n    });\n    console.log(response);\n    unrecognizedList.push(currentPlateNumber);\n  }\n\n  setTimeout(sendImage, 10000);\n};\n\nmodule.exports = sendImage;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dashboard/sendFeed.js"],"names":["Axios","require","Tesseract","carsTest","testPlate","testPlate1","testCars","cocoSsd","modelTest","securityTest","video","document","createElement","setAttribute","src","unrecognizedList","bufferContext","drawImage","canvas","sendImage","dataUrl","toDataURL","model","load","predictions","detect","currentFrame","console","log","length","forEach","d","class","bbox","Image","width","height","getContext","buffer","body","appendChild","currentPlateNumber","includes","response","post","plateNumber","push","setTimeout","module","exports"],"mappings":"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","sourcesContent":["const Axios = require('axios')\nconst Tesseract = require('tesseract.js')\n\n// testing images and videos\nconst carsTest = require('../cameraFeed/carsTest.mp4')\nconst testPlate = require('./testPlate.jpg')\nconst testPlate1 = require('./testPlate1.jpg')\nconst testCars = require('./testCars.jpeg')\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst modelTest = require('./testingModel.jpg')\nconst securityTest = require('./security.mp4')\n\nlet video = document.createElement('VIDEO')\nvideo.setAttribute('autoplay', 'true')\nvideo.setAttribute('controls', 'controls')\n\nvideo.src = securityTest\n\nlet unrecognizedList = []\n\nbufferContext.drawImage(canvas, 400, 400)\n\nconst sendImage = async() => {\n\n    // get screenshot from current video \n    let dataUrl = canvas.toDataURL()\n\n    // load TensorFlow model\n    const model = await cocoSsd.load()\n    \n    // classify image\n    const predictions = await model.detect(currentFrame)\n\n    console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized')\n    if(predictions.length){\n        predictions.forEach((d) => {\n            if(d.class === \"car\"){\n            console.log(d.bbox)\n            \n            let currentFrame = new Image()\n            currentFrame.src = modelTest\n            currentFrame.width = 400\n            currentFrame.height = 400\n\n            let canvas = document.createElement('canvas')\n            canvas.width = 400\n            canvas.height = 400\n            canvas.getContext('2d').drawImage(currentFrame, 0, 0)\n\n            let buffer = document.createElement('canvas')\n            let bufferContext = buffer.getContext('2d')\n            buffer.width = 400\n            buffer.height = 400\n            \n            document.body.appendChild(buffer)\n            }\n        })\n    }\n    \n    // Tesseract.recognize(\n    //     testPlate,\n    //     'eng'\n    // ).then(({ data: { text }} ) => {\n    //     console.log(\"Recognized text: \", text)\n    // })\n\n    // for each video in the current list of video endpoints\n\n    // check db for the plate\n\n    // if unrecognized, send to db and alert \n\n    let currentPlateNumber = '123456'\n\n    // eventually changed to get unrecognized plates from db \n\n    if(!(unrecognizedList.includes(currentPlateNumber))){\n\n        let response = Axios.post('/api/unrecognized/addUnrecognized', {\n            plateNumber: currentPlateNumber\n        })\n\n        console.log(response)\n        unrecognizedList.push(currentPlateNumber)\n    }\n\n    setTimeout(sendImage, 10000)\n}   \n\n\nmodule.exports = sendImage"]},"metadata":{},"sourceType":"module"}