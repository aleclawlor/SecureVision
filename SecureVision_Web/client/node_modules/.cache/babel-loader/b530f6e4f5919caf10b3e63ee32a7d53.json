{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/unrecognizedActivity/unrecognizedDashboard.js\";\nimport React, { Component } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport UnrecognizedTable from './unrecognizedTable';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from 'react-loader-spinner';\n\nconst Axios = require('axios');\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  chart: {\n    width: '125%',\n    height: '300px'\n  },\n  heatmap: {\n    padding: theme.spacing(2),\n    width: '75%',\n    marginLeft: '25%',\n    height: '310px'\n  },\n  timePlot: {\n    marginTop: '30px',\n    padding: theme.spacing(2),\n    width: '75%',\n    marginLeft: '25%',\n    height: '310px'\n  }\n}));\n\nclass MyGrid extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataList: [],\n      sortType: 'recent',\n      loading: true\n    };\n\n    this.setSort = type => {\n      console.log(type);\n\n      if (type === 'recent') {\n        this.setState({\n          sortType: 'recent'\n        });\n      } else if (type === 'recognitions') {\n        this.setState({\n          sortType: 'recognitions'\n        });\n      }\n\n      this.refresh();\n    };\n\n    this.refresh = async () => {\n      let data = await Axios.get('/api/lpr/getUnrecognizedData');\n      let rawData = data.data;\n      let sorted;\n\n      if (this.state.sortType === 'recent') {\n        sorted = rawData.sort((a, b) => a.date < b.date ? 1 : a.date === b.date ? a.time < b.time ? 1 : -1 : -1);\n      } else if (this.state.sortType === 'recognitions') {\n        sorted = rawData.sort((a, b) => a.entryNumber > b.entryNumber ? -1 : a.entryNumber === b.entryNumber ? -1 : 1);\n      }\n\n      this.setState({\n        dataList: sorted,\n        loading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(this.refresh, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      className: classes.chart,\n      style: {\n        width: '200%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: '25%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      type: \"Rings\",\n      color: \"#000A40\",\n      height: 500,\n      width: 500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(UnrecognizedTable, {\n      setSort: this.setSort,\n      dataList: this.state.dataList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default withStyles(useStyles)(MyGrid);","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/unrecognizedActivity/unrecognizedDashboard.js"],"names":["React","Component","makeStyles","withStyles","Paper","Grid","UnrecognizedTable","Loader","Axios","require","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","chart","width","height","heatmap","marginLeft","timePlot","marginTop","MyGrid","state","dataList","sortType","loading","setSort","type","console","log","setState","refresh","data","get","rawData","sorted","sort","a","b","date","time","entryNumber","componentDidMount","intervalId","setInterval","componentWillUnmount","clearInterval","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport UnrecognizedTable from './unrecognizedTable'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\n\nconst Axios = require('axios')\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  chart: {\n      width: '125%',\n      height: '300px'\n  },\n  heatmap: {\n      padding: theme.spacing(2),\n      width: '75%',\n      marginLeft: '25%',\n      height: '310px'\n  },\n  timePlot: {\n    marginTop: '30px',\n    padding: theme.spacing(2),\n    width: '75%',\n    marginLeft: '25%',\n    height: '310px'\n  }\n}));\n\nclass MyGrid extends Component {\n\n  intervalId\n\n  state = {\n    dataList: [],\n    sortType: 'recent',\n    loading: true\n  }\n  \n  setSort = (type) => {\n    \n    console.log(type)\n\n    if(type === 'recent'){\n      this.setState({sortType: 'recent'})\n    }\n\n    else if(type === 'recognitions'){\n      this.setState({sortType: 'recognitions'})\n    }\n\n    this.refresh()\n  }\n\n  refresh = async() => {\n\n    let data = await Axios.get('/api/lpr/getUnrecognizedData')\n    \n    let rawData = data.data\n\n    let sorted\n\n    if(this.state.sortType === 'recent'){\n      sorted = rawData.sort((a,b) => (a.date < b.date) ? 1: (a.date === b.date) ? ((a.time < b.time) ? 1 : -1): -1)\n    }\n    \n    else if(this.state.sortType === 'recognitions'){\n      sorted = rawData.sort((a, b) => (a.entryNumber > b.entryNumber) ? -1 : (a.entryNumber === b.entryNumber) ? -1 : 1)\n    }\n\n    this.setState({dataList: sorted, loading: false})\n  }\n\n  componentDidMount(){\n    this.intervalId = setInterval(this.refresh, 10000)\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.intervalId)\n  }\n  \n  render(){\n    const {classes} = this.props;\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Paper className={classes.chart} style={{width: '200%'}}>\n                {this.state.loading ? \n                <div style={{marginLeft: '25%'}}>\n                    <Loader\n                    type=\"Rings\"\n                    color=\"#000A40\"\n                    height={500}\n                    width={500}\n                    />\n                </div>\n                  :\n                  <UnrecognizedTable setSort={this.setSort} dataList={this.state.dataList}/>}\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n          </Grid>\n        </Grid>\n      </div>\n    )};\n}\n\nexport default withStyles(useStyles)(MyGrid)"]},"metadata":{},"sourceType":"module"}