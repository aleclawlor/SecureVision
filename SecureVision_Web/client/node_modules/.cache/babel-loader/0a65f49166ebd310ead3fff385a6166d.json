{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/dailyActivity/completeLog.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow'; // initialize columns to show in complete feed table as well as their styling \n\nconst columns = [{\n  id: 'number',\n  label: 'Plate Number',\n  minWidth: 100\n}, {\n  id: 'recognized',\n  label: 'Recognized Status',\n  minWidth: 150,\n  align: 'left'\n}, {\n  id: 'location',\n  label: 'Location',\n  minWidth: 170,\n  align: 'left',\n  format: value => value.toFixed(2)\n}, {\n  id: 'time',\n  label: 'Time Entered',\n  minWidth: 170,\n  align: 'left',\n  format: value => value.toLocaleString()\n}, {\n  id: 'date',\n  label: 'Date',\n  minWidth: 170,\n  align: 'left',\n  format: value => value.toLocaleString()\n}]; // create a data row\n// currently not used but may be used in the future \n\nfunction createData(number, recognized, location, time, date) {\n  return {\n    number,\n    recognized,\n    location,\n    time,\n    date\n  };\n}\n\nconst rows = [];\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#FAFAFA',\n    color: '#E5E5E5',\n    width: '100%',\n    height: '200%'\n  },\n  container: {\n    backgroundColor: '#FAFAFA',\n    maxHeight: 600\n  }\n});\nexport default function StickyHeadTable(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10); // change page for pagination \n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const schoolID = JSON.parse(localStorage.getItem('userObj'))._id;\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    style: {\n      backgroundColor: '#FAFAFA',\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth,\n      fontWeight: 'bold',\n      backgroundColor: '#FAFAFA'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }\n    });\n  }), props.dataList.map((d, i) => {\n    if (d.schoolID === schoolID) {\n      // filter by school-specific ID \n      let typeIcon;\n\n      if (d.type === 'Parent') {\n        typeIcon = /*#__PURE__*/React.createElement(\"i\", {\n          style: {\n            marginLeft: '24%',\n            color: '#1C63CD',\n            opacity: '1'\n          },\n          class: \"far fa-id-badge fa-2x\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 36\n          }\n        });\n      } else {\n        typeIcon = /*#__PURE__*/React.createElement(\"i\", {\n          style: {\n            marginLeft: '23%',\n            color: '#FD663A',\n            marginTop: '10px'\n          },\n          class: \"material-icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 36\n          }\n        }, \"error_outline\");\n      } // render a table row for each plate in the feed \n\n\n      return /*#__PURE__*/React.createElement(TableRow, {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 27\n        }\n      }, d.plateNumber), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 27\n        }\n      }, typeIcon), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 27\n        }\n      }, d.location), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 27\n        }\n      }, d.time), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 27\n        }\n      }, d.date));\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dailyActivity/completeLog.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","columns","id","label","minWidth","align","format","value","toFixed","toLocaleString","createData","number","recognized","location","time","date","rows","useStyles","root","backgroundColor","color","width","height","container","maxHeight","StickyHeadTable","props","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","schoolID","JSON","parse","localStorage","getItem","_id","fontWeight","map","column","slice","row","code","dataList","d","i","typeIcon","type","marginLeft","opacity","marginTop","plateNumber"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n// initialize columns to show in complete feed table as well as their styling \nconst columns = [\n  { id: 'number', label: 'Plate Number', minWidth: 100 },\n  { id: 'recognized', label: 'Recognized Status', minWidth: 150, align: 'left'},\n  { id: 'location', label: 'Location', minWidth: 170, align: 'left', format: (value) => value.toFixed(2),},\n  { id: 'time', label: 'Time Entered', minWidth: 170, align: 'left', format: (value) => value.toLocaleString(),},\n  { id: 'date', label: 'Date', minWidth: 170, align: 'left', format: (value) => value.toLocaleString(),},\n];\n\n// create a data row\n// currently not used but may be used in the future \nfunction createData(number, recognized, location, time, date) {\n  return { number, recognized, location, time, date};\n}\n\nconst rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#FAFAFA',\n    color: '#E5E5E5',\n    width: '100%',\n    height: '200%'\n  },\n  container: {\n    backgroundColor: '#FAFAFA',\n    maxHeight: 600,\n  },\n});\n\nexport default function StickyHeadTable(props) {\n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  // change page for pagination \n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const schoolID = JSON.parse(localStorage.getItem('userObj'))._id\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead style={{backgroundColor: '#FAFAFA', fontWeight: 'bold'}}>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell \n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth, fontWeight: 'bold', backgroundColor: '#FAFAFA'}}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (<TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}></TableRow>);\n            })}\n            {props.dataList.map((d, i) => {\n                    if(d.schoolID === schoolID){  // filter by school-specific ID \n                      let typeIcon;\n                      if (d.type === 'Parent'){\n                        typeIcon = <i style={{marginLeft: '24%', color: '#1C63CD', opacity: '1'}} class=\"far fa-id-badge fa-2x\"></i>\n                      } else {\n                        typeIcon = <i style={{marginLeft: '23%', color: '#FD663A', marginTop: '10px'}} class=\"material-icons\">error_outline</i>\n                      }\n\n                      // render a table row for each plate in the feed \n                      return(\n                        <TableRow key={i}>\n                          <TableCell component=\"th\" scope=\"row\">{d.plateNumber}</TableCell>\n                          <TableCell align=\"left\">{typeIcon}</TableCell>\n                          <TableCell align=\"left\">{d.location}</TableCell>\n                          <TableCell align=\"left\">{d.time}</TableCell>\n                          <TableCell align=\"left\">{d.date}</TableCell>\n                        </TableRow>\n                      )}})}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}