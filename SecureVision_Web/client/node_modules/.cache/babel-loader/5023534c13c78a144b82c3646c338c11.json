{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/dailyActivity/activityLayout.js\";\nimport React, { Component } from 'react';\nimport TableFixedHeader from './completeLog';\nimport Snackbar from '../snackbar/snackbar';\n\nconst Axios = require('axios');\n\nclass activityLayout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataList: [],\n      highRiskAlert: null\n    };\n\n    this.refresh = async () => {\n      let data = await Axios.get('/api/lpr/getGeneralData');\n      let rawData = data.data; // console.log(rawData)\n\n      let sorted = rawData.sort((a, b) => a.date < b.date ? 1 : a.date === b.date ? a.time < b.time ? 1 : -1 : -1);\n      let currentList = this.state.dataList; // let newPlates = sorted.filter(item => currentList.includes(item))\n\n      if (currentList.length != sorted.length && currentList.length != 0) {\n        console.log(\"Trigger the snack bar\");\n        this.setState({\n          highRiskAlert: React.createElement(Snackbar, {\n            shouldOpen: this.state.shouldAlert,\n            message: \"High Risk Plate Detected\",\n            activate: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          }),\n          dataList: sorted\n        });\n        return;\n      }\n\n      this.setState({\n        dataList: sorted,\n        highRiskAlert: null\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.refresh();\n    this.intervalId = setInterval(this.refresh, 5000);\n  }\n\n  componentWillMount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(TableFixedHeader, {\n      dataList: this.state.dataList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), this.state.highRiskAlert);\n  }\n\n}\n\nexport default activityLayout;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dailyActivity/activityLayout.js"],"names":["React","Component","TableFixedHeader","Snackbar","Axios","require","activityLayout","state","dataList","highRiskAlert","refresh","data","get","rawData","sorted","sort","a","b","date","time","currentList","length","console","log","setState","shouldAlert","componentDidMount","intervalId","setInterval","componentWillMount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,gBAAP,MAA6B,eAA7B;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,cAAN,SAA6BL,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAIpCM,KAJoC,GAI5B;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,aAAa,EAAE;AAFT,KAJ4B;;AAAA,SASpCC,OAToC,GAS1B,YAAW;AACnB,UAAIC,IAAI,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,yBAAV,CAAjB;AACA,UAAIC,OAAO,GAAGF,IAAI,CAACA,IAAnB,CAFmB,CAGnB;;AACA,UAAIG,MAAM,GAAGD,OAAO,CAACE,IAAR,CAAa,CAACC,CAAD,EAAGC,CAAH,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAZ,GAAoB,CAApB,GAAwBF,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAd,GAAwBF,CAAC,CAACG,IAAF,GAASF,CAAC,CAACE,IAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhD,GAAoD,CAAC,CAAlG,CAAb;AAEA,UAAIC,WAAW,GAAG,KAAKb,KAAL,CAAWC,QAA7B,CANmB,CAOnB;;AAEA,UAAGY,WAAW,CAACC,MAAZ,IAAsBP,MAAM,CAACO,MAA7B,IAAuCD,WAAW,CAACC,MAAZ,IAAsB,CAAhE,EAAkE;AAC9DC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,aAAKC,QAAL,CACI;AACAf,UAAAA,aAAa,EACb,oBAAC,QAAD;AACI,YAAA,UAAU,EAAE,KAAKF,KAAL,CAAWkB,WAD3B;AAEI,YAAA,OAAO,EAAC,0BAFZ;AAGI,YAAA,QAAQ,EAAE,IAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAOAjB,UAAAA,QAAQ,EAAEM;AAPV,SADJ;AAUA;AACH;;AAED,WAAKU,QAAL,CAAc;AAAChB,QAAAA,QAAQ,EAAEM,MAAX;AAAmBL,QAAAA,aAAa,EAAE;AAAlC,OAAd;AACD,KAlCmC;AAAA;;AAoCpCiB,EAAAA,iBAAiB,GAAE;AACjB,SAAKhB,OAAL;AACA,SAAKiB,UAAL,GAAkBC,WAAW,CAAC,KAAKlB,OAAN,EAAe,IAAf,CAA7B;AACD;;AAEDmB,EAAAA,kBAAkB,GAAE;AAChBC,IAAAA,aAAa,CAAC,KAAKH,UAAN,CAAb;AACH;;AAGDI,EAAAA,MAAM,GAAE;AACN,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKD,KAAL,CAAWE,aAFhB,CADJ;AAMC;;AArDiC;;AAwDtC,eAAeH,cAAf","sourcesContent":["import React, {Component} from 'react'\nimport TableFixedHeader from './completeLog'\nimport Snackbar from '../snackbar/snackbar'\n\nconst Axios = require('axios')\n\nclass activityLayout extends Component{\n\n  intervalId\n\n  state = {\n    dataList: [],\n    highRiskAlert: null\n  }\n\n  refresh = async() => {\n    let data = await Axios.get('/api/lpr/getGeneralData')\n    let rawData = data.data\n    // console.log(rawData)\n    let sorted = rawData.sort((a,b) => (a.date < b.date) ? 1: (a.date === b.date) ? ((a.time < b.time) ? 1 : -1): -1)\n\n    let currentList = this.state.dataList\n    // let newPlates = sorted.filter(item => currentList.includes(item))\n\n    if(currentList.length != sorted.length && currentList.length != 0){\n        console.log(\"Trigger the snack bar\")\n        this.setState(\n            {\n            highRiskAlert: \n            <Snackbar \n                shouldOpen={this.state.shouldAlert} \n                message=\"High Risk Plate Detected\"\n                activate={true}\n            />,\n            dataList: sorted\n        })\n        return \n    }\n\n    this.setState({dataList: sorted, highRiskAlert: null})\n  }\n\n  componentDidMount(){\n    this.refresh()\n    this.intervalId = setInterval(this.refresh, 5000)\n  }\n\n  componentWillMount(){\n      clearInterval(this.intervalId)\n  }\n\n\n  render(){\n    return(\n        <div>\n            <TableFixedHeader dataList={this.state.dataList}/>\n            {this.state.highRiskAlert}\n        </div>\n       )\n    }\n}\n\nexport default activityLayout"]},"metadata":{},"sourceType":"module"}