{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/mainFeed.js\";\nimport React, { Component } from 'react';\nimport ReactPlayer from 'react-player';\nimport Paper from '@material-ui/core/Paper';\nimport { Button } from '@material-ui/core';\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst videoSrc = require('./plateTest.mp4');\n\nclass MainFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n\n    this.showDetections = (predictions, video) => {\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      let vid = this.videoRef.current;\n\n      vid.onended = () => {\n        this.finished = true;\n        alert(\"video has ended\");\n      };\n\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const font = \"24px helvetica\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n      predictions.forEach(prediction => {\n        if (this.finished) {\n          return;\n        }\n\n        console.log(prediction);\n\n        if (prediction.class === 'car' || prediction.class === 'motorcycle' || prediction.class === 'truck' || prediction.class === 'bus') {\n          const x = prediction.bbox[0];\n          const y = prediction.bbox[1];\n          const width = prediction.bbox[2];\n          const height = prediction.bbox[3]; // Draw the bounding box.\n\n          ctx.strokeStyle = \"#FF7801\";\n          ctx.lineWidth = 1;\n          ctx.strokeRect(x, y, width, height); // Draw the label background.\n\n          ctx.fillStyle = \"#FF7801\";\n          const textWidth = ctx.measureText(prediction.class).width;\n          const textHeight = parseInt(font, 10); // draw top left rectangle\n\n          ctx.fillRect(x, y, textWidth + 10, textHeight + 10); // draw bottom left rectangle\n\n          ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n          ctx.fillStyle = \"#000000\";\n          ctx.fillText(prediction.class, x, y);\n          ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight); //   let tempCanvas = document.createElement('canvas')\n          //   let tempContext = tempCanvas.getContext('2d')\n          //   tempContext.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height)\n          //   let imageData = tempContext.getImageData(x, y, width, height)\n          //   // let contrastData = this.imageContrast(imageData, 120)\n          //   // let grayScaleData = this.imageGrayScale(contrastData, tempCanvas.width, tempCanvas.height)\n          //   // let thresholdData = this.imageThreshold(grayScaleData, 170)  \n          //   tempContext.putImageData(imageData, 0, 0)\n          //   let currentCar = new Image()\n          //   currentCar.src = tempCanvas.toDataURL('image/png')\n          //   document.body.append(currentCar)\n          //   // this.characterRecognize(currentCar)\n        }\n      });\n    };\n\n    this.detectFromVideoFrame = (model, video) => {\n      model.detect(video).then(predictions => {\n        this.showDetections(predictions, video);\n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      source: this.props.source,\n      name: this.props.name,\n      port: this.props.port,\n      buttonNames: this.props.buttonNames\n    };\n  }\n\n  componentDidMount() {\n    const loadlModelPromise = cocoSsd.load(); // resolve all the Promises\n\n    Promise.all([loadlModelPromise]).then(values => {\n      this.detectFromVideoFrame(values[0], this.videoRef.current);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  render() {\n    let player = {\n      marginTop: '5px'\n    };\n    let buttonGridStyle = {\n      width: '700px',\n      height: '200px',\n      textAlign: 'center'\n    };\n    let buttons = {\n      marginLeft: '15px',\n      width: '670px',\n      height: '180px',\n      display: 'grid',\n      gridTemplateColumns: 'repeat(6, 111.66px)'\n    };\n    const styles = {\n      position: 'fixed',\n      top: 150,\n      left: 150\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      style: styles,\n      src: videoSrc,\n      ref: this.videoRef,\n      width: \"720\",\n      height: \"650\",\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      style: styles,\n      ref: this.canvasRef,\n      width: \"720\",\n      height: \"650\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MainFeed;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/mainFeed.js"],"names":["React","Component","ReactPlayer","Paper","Button","cocoSsd","require","videoSrc","MainFeed","videoRef","createRef","canvasRef","showDetections","predictions","video","ctx","current","getContext","vid","onended","finished","alert","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","console","log","class","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","score","toFixed","detectFromVideoFrame","model","detect","then","requestAnimationFrame","error","state","source","props","name","port","buttonNames","componentDidMount","loadlModelPromise","load","Promise","all","values","catch","render","player","marginTop","buttonGridStyle","textAlign","buttons","marginLeft","display","gridTemplateColumns","styles","position","top","left"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactPlayer from 'react-player'\nimport Paper from '@material-ui/core/Paper'\nimport { Button } from '@material-ui/core'\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst videoSrc = require('./plateTest.mp4')\n\nclass MainFeed extends Component{\n\n    videoRef = React.createRef();\n    canvasRef = React.createRef();\n\n    showDetections = (predictions, video) => {\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        \n        let vid = this.videoRef.current\n        vid.onended = () => {\n          this.finished = true \n          alert(\"video has ended\")\n        }\n    \n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        const font = \"24px helvetica\";\n        ctx.font = font;\n        ctx.textBaseline = \"top\";\n        predictions.forEach(prediction => {\n    \n        if(this.finished){\n          return \n        }\n    \n          console.log(prediction)\n    \n          if(prediction.class === 'car' || prediction.class === 'motorcycle' || prediction.class === 'truck' || prediction.class === 'bus'){\n          const x = prediction.bbox[0];\n          const y = prediction.bbox[1];\n          const width = prediction.bbox[2];\n          const height = prediction.bbox[3];\n          // Draw the bounding box.\n          ctx.strokeStyle = \"#FF7801\";\n          ctx.lineWidth = 1;\n          ctx.strokeRect(x, y, width, height);\n          // Draw the label background.\n          ctx.fillStyle = \"#FF7801\";\n          const textWidth = ctx.measureText(prediction.class).width;\n          const textHeight = parseInt(font, 10);\n          // draw top left rectangle\n          ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n          // draw bottom left rectangle\n          ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n    \n          ctx.fillStyle = \"#000000\";\n          ctx.fillText(prediction.class, x, y);\n          ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n    \n        //   let tempCanvas = document.createElement('canvas')\n        //   let tempContext = tempCanvas.getContext('2d')\n        //   tempContext.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height)\n        //   let imageData = tempContext.getImageData(x, y, width, height)\n          \n        //   // let contrastData = this.imageContrast(imageData, 120)\n        //   // let grayScaleData = this.imageGrayScale(contrastData, tempCanvas.width, tempCanvas.height)\n        //   // let thresholdData = this.imageThreshold(grayScaleData, 170)  \n        //   tempContext.putImageData(imageData, 0, 0)\n    \n        //   let currentCar = new Image()\n        //   currentCar.src = tempCanvas.toDataURL('image/png')\n        //   document.body.append(currentCar)\n        //   // this.characterRecognize(currentCar)\n          }\n        });\n      };\n\n    detectFromVideoFrame = (model, video) => {\n        model.detect(video).then(predictions => {\n          this.showDetections(predictions, video);\n          requestAnimationFrame(() => {\n            this.detectFromVideoFrame(model, video);\n          });\n        }, (error) => {\n          console.error(error)\n        });\n      };\n\n    state = {\n        source: this.props.source,\n        name: this.props.name,\n        port: this.props.port,\n        buttonNames: this.props.buttonNames\n    }  \n\n    componentDidMount(){\n        const loadlModelPromise = cocoSsd.load();\n\n      // resolve all the Promises\n        Promise.all([loadlModelPromise])\n            .then(values => {\n            this.detectFromVideoFrame(values[0], this.videoRef.current);\n            })\n            .catch(error => {\n            console.error(error);\n            });\n    }\n\n    render(){\n\n        let player = {\n            marginTop: '5px'\n        }\n\n        let buttonGridStyle={\n            width: '700px',\n            height: '200px',\n            textAlign:'center'\n        }\n\n        let buttons = {\n            marginLeft: '15px', \n            width: '670px', \n            height:'180px', \n            display: 'grid',\n            gridTemplateColumns: 'repeat(6, 111.66px)'\n        }\n\n        const styles = {\n            position: 'fixed',\n            top: 150,\n            left: 150,\n          };\n\n        return(\n            <div>\n                <div>\n                    {/* <ReactPlayer url={'https://www.youtube.com/watch?v=F4SY7kTpqjk'} playing muted controls={false} className={player} width=\"100%\" height=\"100%\"/> */}\n                    <video style={styles} src={videoSrc} ref={this.videoRef} width=\"720\" height=\"650\" controls></video>\n                    <canvas style={styles} ref={this.canvasRef} width=\"720\" height=\"650\" />\n                    {/* <div style={{marginTop: '15px'}}>\n                        <h1 style={{marginLeft: '15px'}}>{this.state.name}</h1>\n                    </div> */}\n                    {/* <div style={buttonGridStyle}>\n                        <div style={buttons}>\n                            {this.state.buttonNames.map((d) => {\n                                console.log(d)\n                             return <Button>{d}</Button>\n                            })}\n                        </div>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainFeed"]},"metadata":{},"sourceType":"module"}