{"ast":null,"code":"var _jsxFileName = \"/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/detection.js\";\nimport React from 'react';\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst videoSrc = require('./plateTest.mp4');\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.video = document.createElement('video');\n    this.styles = {\n      position: 'fixed',\n      top: 150,\n      left: 150\n    };\n\n    this.characterRecognize = image => {\n      Tesseract.recognize(image, 'eng' // { logger: m => console.log(m) }\n      ).then(({\n        data: {\n          text\n        }\n      }) => {\n        console.log(text);\n      });\n    };\n\n    this.imageContrast = (imageData, amount) => {\n      let d = imageData.data;\n      let contrast = amount / 100 + 1;\n      let intercept = 128 * (1 - contrast);\n\n      for (let i = 0; i < d.length; i += 4) {\n        d[i] = d[i] * contrast + intercept;\n        d[i + 1] = d[i + 1] * contrast + intercept;\n        d[i + 2] = d[i + 2] * contrast + intercept;\n      }\n\n      return imageData;\n    };\n\n    this.imageGrayScale = (imageData, width, height) => {\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          let i = y * 4 * width + x * 4;\n          let avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n          imageData.data[i] = avg;\n          imageData.data[i + 1] = avg;\n          imageData.data[i + 2] = avg;\n        }\n      }\n\n      return imageData;\n    };\n\n    this.imageThreshold = (imageData, threshold) => {\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        imageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = imageData.data[i + 1] > threshold ? 255 : 0;\n      }\n\n      return imageData;\n    };\n\n    this.detectFromVideoFrame = (model, video) => {\n      model.detect(video).then(predictions => {\n        this.showDetections(predictions, video);\n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.stall = () => {\n      setInterval(() => {\n        let x = 'anc';\n      }, 1000);\n    };\n\n    this.finished = false;\n\n    this.showDetections = (predictions, video) => {\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      let vid = this.videoRef.current;\n\n      vid.onended = () => {\n        this.finished = true;\n        alert(\"video has ended\");\n      };\n\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const font = \"24px helvetica\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n      predictions.forEach(prediction => {\n        if (this.finished) {\n          return;\n        }\n\n        console.log(prediction);\n\n        if (prediction.class === 'car' || prediction.class === 'motorcycle' || prediction.class === 'truck' || prediction.class === 'bus') {\n          const x = prediction.bbox[0];\n          const y = prediction.bbox[1];\n          const width = prediction.bbox[2];\n          const height = prediction.bbox[3]; // Draw the bounding box.\n\n          ctx.strokeStyle = \"#FF7801\";\n          ctx.lineWidth = 1;\n          ctx.strokeRect(x, y, width, height); // Draw the label background.\n\n          ctx.fillStyle = \"#FF7801\";\n          const textWidth = ctx.measureText(prediction.class).width;\n          const textHeight = parseInt(font, 10); // draw top left rectangle\n\n          ctx.fillRect(x, y, textWidth + 10, textHeight + 10); // draw bottom left rectangle\n\n          ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n          ctx.fillStyle = \"#000000\";\n          ctx.fillText(prediction.class, x, y);\n          ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n          let tempCanvas = document.createElement('canvas');\n          let tempContext = tempCanvas.getContext('2d');\n          tempContext.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height);\n          let imageData = tempContext.getImageData(x, y, width, height); // let contrastData = this.imageContrast(imageData, 120)\n          // let grayScaleData = this.imageGrayScale(contrastData, tempCanvas.width, tempCanvas.height)\n          // let thresholdData = this.imageThreshold(grayScaleData, 170)  \n\n          tempContext.putImageData(imageData, 0, 0);\n          let currentCar = new Image();\n          currentCar.src = tempCanvas.toDataURL('image/png');\n          document.body.append(currentCar); // this.characterRecognize(currentCar)\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\n      // can later be used to get the live stream from a school's security camera\n      const webcamPromise = navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: false\n      }).then(stream => {\n        // pass the current frame to the window.stream\n        window.stream = 'stream'; // pass the stream to the videoRef\n\n        this.videoRef.current.srcObject = 'stream';\n        return new Promise(resolve => {\n          this.videoRef.current.onloadedmetadata = () => {\n            resolve();\n          };\n        });\n      }, error => {\n        console.error(error);\n      }); // define a Promise that will be used to load the model\n\n      const loadlModelPromise = cocoSsd.load(); // resolve all the Promises\n\n      Promise.all([loadlModelPromise]).then(values => {\n        this.detectFromVideoFrame(values[0], this.videoRef.current);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }\n\n  render() {\n    console.log(this.videoRef);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      id: \"video\",\n      style: this.styles,\n      autoPlay: true,\n      muted: true,\n      src: videoSrc,\n      ref: this.videoRef,\n      width: \"720\",\n      height: \"600\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      style: this.styles,\n      ref: this.canvasRef,\n      width: \"720\",\n      height: \"650\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/cameraFeed/detection.js"],"names":["React","cocoSsd","require","videoSrc","App","Component","videoRef","createRef","canvasRef","video","document","createElement","styles","position","top","left","characterRecognize","image","Tesseract","recognize","then","data","text","console","log","imageContrast","imageData","amount","d","contrast","intercept","i","length","imageGrayScale","width","height","y","x","avg","imageThreshold","threshold","detectFromVideoFrame","model","detect","predictions","showDetections","requestAnimationFrame","error","stall","setInterval","finished","ctx","current","getContext","vid","onended","alert","clearRect","canvas","font","textBaseline","forEach","prediction","class","bbox","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","score","toFixed","tempCanvas","tempContext","drawImage","getImageData","putImageData","currentCar","Image","src","toDataURL","body","append","componentDidMount","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","webcamPromise","audio","stream","window","srcObject","Promise","resolve","onloadedmetadata","loadlModelPromise","load","all","values","catch","render"],"mappings":"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","sourcesContent":["import React from 'react'\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\n\nconst videoSrc = require('./plateTest.mp4')\n\nclass App extends React.Component {\n\n    // reference to video and canvas\n    videoRef = React.createRef();\n    canvasRef = React.createRef();\n    video = document.createElement('video')\n  \n    styles = {\n      position: 'fixed',\n      top: 150,\n      left: 150,\n    };\n  \n    characterRecognize = (image) => {\n      Tesseract.recognize(\n        image,\n        'eng',\n        // { logger: m => console.log(m) }\n      ).then(({ data: { text }}) => {\n        console.log(text)\n      })\n    }\n  \n    imageContrast = (imageData, amount) => {\n  \n      let d = imageData.data\n  \n      let contrast = (amount/100) + 1\n      let intercept = 128 * (1-contrast)\n  \n      for(let i = 0; i < d.length; i+=4){\n          d[i] = d[i]*contrast + intercept;\n          d[i+1] = d[i+1]*contrast + intercept;\n          d[i+2] = d[i+2]*contrast + intercept;\n      }\n      return imageData\n    }\n  \n    imageGrayScale = (imageData, width, height) => {\n      for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n          let i = (y*4) * width + x * 4\n          let avg = (imageData.data[i] + imageData.data[i+1] + imageData.data[i+2]) / 3\n          imageData.data[i] = avg \n          imageData.data[i + 1] = avg \n          imageData.data[i + 2] = avg \n        }\n      }\n      return imageData\n    }\n  \n    imageThreshold = (imageData, threshold) => {\n      for(let i = 0; i < imageData.data.length; i += 4){\n          imageData.data[i] = imageData.data[i+1] = imageData.data[i+2] = imageData.data[i+1] > threshold ? 255 : 0\n      }\n      return imageData\n    }\n  \n    detectFromVideoFrame = (model, video) => {\n      model.detect(video).then(predictions => {\n        this.showDetections(predictions, video);\n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }, (error) => {\n        console.error(error)\n      });\n    };\n  \n    stall = () => {\n      setInterval(() => {\n        let x = 'anc'},1000)\n    }\n  \n    finished = false \n  \n    showDetections = (predictions, video) => {\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      \n      let vid = this.videoRef.current\n      vid.onended = () => {\n        this.finished = true \n        alert(\"video has ended\")\n      }\n  \n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const font = \"24px helvetica\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n      predictions.forEach(prediction => {\n  \n      if(this.finished){\n        return \n      }\n  \n        console.log(prediction)\n  \n        if(prediction.class === 'car' || prediction.class === 'motorcycle' || prediction.class === 'truck' || prediction.class === 'bus'){\n        const x = prediction.bbox[0];\n        const y = prediction.bbox[1];\n        const width = prediction.bbox[2];\n        const height = prediction.bbox[3];\n        // Draw the bounding box.\n        ctx.strokeStyle = \"#FF7801\";\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x, y, width, height);\n        // Draw the label background.\n        ctx.fillStyle = \"#FF7801\";\n        const textWidth = ctx.measureText(prediction.class).width;\n        const textHeight = parseInt(font, 10);\n        // draw top left rectangle\n        ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n        // draw bottom left rectangle\n        ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n  \n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(prediction.class, x, y);\n        ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n  \n        let tempCanvas = document.createElement('canvas')\n        let tempContext = tempCanvas.getContext('2d')\n        tempContext.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height)\n        let imageData = tempContext.getImageData(x, y, width, height)\n        \n        // let contrastData = this.imageContrast(imageData, 120)\n        // let grayScaleData = this.imageGrayScale(contrastData, tempCanvas.width, tempCanvas.height)\n        // let thresholdData = this.imageThreshold(grayScaleData, 170)  \n        tempContext.putImageData(imageData, 0, 0)\n  \n        let currentCar = new Image()\n        currentCar.src = tempCanvas.toDataURL('image/png')\n        document.body.append(currentCar)\n        // this.characterRecognize(currentCar)\n        }\n      });\n    };\n  \n    componentDidMount() {\n  \n      if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\n        \n        // can later be used to get the live stream from a school's security camera\n        const webcamPromise = navigator.mediaDevices\n          .getUserMedia({\n            video: true,\n            audio: false,\n          })\n          .then(stream => {\n            // pass the current frame to the window.stream\n            window.stream = 'stream';\n            // pass the stream to the videoRef\n            this.videoRef.current.srcObject = 'stream';\n  \n            return new Promise(resolve => {\n              this.videoRef.current.onloadedmetadata = () => {\n                resolve();\n              };\n            });\n          }, (error) => {\n            console.error(error)\n          });\n  \n        // define a Promise that will be used to load the model\n        const loadlModelPromise = cocoSsd.load();\n  \n        // resolve all the Promises\n        Promise.all([loadlModelPromise])\n          .then(values => {\n            this.detectFromVideoFrame(values[0], this.videoRef.current);\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      }\n    }\n  \n    render() {\n      console.log(this.videoRef)\n      return (\n        <div> \n          <video\n            id=\"video\"\n            style={this.styles}\n            autoPlay\n            muted\n            src={videoSrc}\n            ref={this.videoRef}\n            width=\"720\"\n            height=\"600\"\n          />\n          <canvas style={this.styles} ref={this.canvasRef} width=\"720\" height=\"650\" />\n        </div>\n      );\n    }\n  }\n  \n  export default App"]},"metadata":{},"sourceType":"module"}