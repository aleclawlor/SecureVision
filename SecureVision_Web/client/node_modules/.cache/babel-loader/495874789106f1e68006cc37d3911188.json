{"ast":null,"code":"const Axios = require('axios');\n\nconst Tesseract = require('tesseract.js'); // testing images and videos\n\n\nconst carsTest = require('../cameraFeed/carsTest.mp4');\n\nconst testPlate = require('./testPlate.jpg');\n\nconst testPlate1 = require('./testPlate1.jpg');\n\nconst testCars = require('./testCars.jpeg');\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst modelTest = require('./testingModel.jpg');\n\nconst securityTest = require('./security.mp4');\n\nlet video = document.createElement('VIDEO');\nvideo.setAttribute('autoplay', 'true');\nvideo.setAttribute('controls', 'controls');\nvideo.src = securityTest;\nlet unrecognizedList = [];\nlet currentFrame = new Image();\ncurrentFrame.src = modelTest;\ncurrentFrame.width = 600;\ncurrentFrame.height = 600;\nlet canvas = document.createElement('canvas');\ncanvas.width = 600;\ncanvas.height = 600;\ncanvas.getContext('2d').drawImage(currentFrame, 0, 0);\nlet buffer = document.createElement('canvas');\nlet bufferContext = buffer.getContext('2d');\nbuffer.width = 600;\nbuffer.height = 600;\nbufferContext.drawImage(canvas, 230, 70, 600, 360, 0, 0, 600, 360);\n\nconst sendImage = async () => {\n  // get screenshot from current video \n  let dataUrl = canvas.toDataURL(); // load TensorFlow model\n\n  const model = await cocoSsd.load(); // classify image\n\n  const predictions = await model.detect(currentFrame);\n  console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized');\n\n  if (predictions.length) {\n    predictions.forEach(d => {\n      if (d.class === \"car\") {\n        console.log(d.bbox);\n        document.body.appendChild(currentFrame);\n        const testImgDiv = new Image();\n        testImgDiv.width = 600;\n        testImgDiv.height = 600;\n        testImgDiv.src = buffer.toDataURL();\n        document.body.appendChild(testImgDiv);\n      }\n    });\n  } // Tesseract.recognize(\n  //     testPlate,\n  //     'eng'\n  // ).then(({ data: { text }} ) => {\n  //     console.log(\"Recognized text: \", text)\n  // })\n  // for each video in the current list of video endpoints\n  // check db for the plate\n  // if unrecognized, send to db and alert \n\n\n  let currentPlateNumber = '123456'; // eventually changed to get unrecognized plates from db \n\n  if (!unrecognizedList.includes(currentPlateNumber)) {\n    let response = Axios.post('/api/unrecognized/addUnrecognized', {\n      plateNumber: currentPlateNumber\n    });\n    console.log(response);\n    unrecognizedList.push(currentPlateNumber);\n  }\n\n  setTimeout(sendImage, 10000);\n};\n\nmodule.exports = sendImage;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dashboard/sendFeed.js"],"names":["Axios","require","Tesseract","carsTest","testPlate","testPlate1","testCars","cocoSsd","modelTest","securityTest","video","document","createElement","setAttribute","src","unrecognizedList","currentFrame","Image","width","height","canvas","getContext","drawImage","buffer","bufferContext","sendImage","dataUrl","toDataURL","model","load","predictions","detect","console","log","length","forEach","d","class","bbox","body","appendChild","testImgDiv","currentPlateNumber","includes","response","post","plateNumber","push","setTimeout","module","exports"],"mappings":"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","sourcesContent":["const Axios = require('axios')\nconst Tesseract = require('tesseract.js')\n\n// testing images and videos\nconst carsTest = require('../cameraFeed/carsTest.mp4')\nconst testPlate = require('./testPlate.jpg')\nconst testPlate1 = require('./testPlate1.jpg')\nconst testCars = require('./testCars.jpeg')\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst modelTest = require('./testingModel.jpg')\nconst securityTest = require('./security.mp4')\n\nlet video = document.createElement('VIDEO')\nvideo.setAttribute('autoplay', 'true')\nvideo.setAttribute('controls', 'controls')\n\nvideo.src = securityTest\n\nlet unrecognizedList = []\n\nlet currentFrame = new Image()\ncurrentFrame.src = modelTest\ncurrentFrame.width = 600\ncurrentFrame.height = 600\n\nlet canvas = document.createElement('canvas')\ncanvas.width = 600\ncanvas.height = 600\ncanvas.getContext('2d').drawImage(currentFrame, 0, 0)\n\nlet buffer = document.createElement('canvas')\nlet bufferContext = buffer.getContext('2d')\nbuffer.width = 600\nbuffer.height = 600\n\nbufferContext.drawImage(canvas, 230, 70, 600, 360, 0, 0, 600, 360)\n\nconst sendImage = async() => {\n\n    // get screenshot from current video \n\n    let dataUrl = canvas.toDataURL()\n\n    // load TensorFlow model\n    const model = await cocoSsd.load()\n    \n    // classify image\n    const predictions = await model.detect(currentFrame)\n\n    console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized')\n    if(predictions.length){\n        predictions.forEach((d) => {\n            if(d.class === \"car\"){\n            console.log(d.bbox)\n            document.body.appendChild(currentFrame)\n            \n            const testImgDiv = new Image()\n            testImgDiv.width = 600\n            testImgDiv.height = 600\n            testImgDiv.src = buffer.toDataURL()\n\n            document.body.appendChild(testImgDiv)\n            }\n        })\n    }\n    \n    // Tesseract.recognize(\n    //     testPlate,\n    //     'eng'\n    // ).then(({ data: { text }} ) => {\n    //     console.log(\"Recognized text: \", text)\n    // })\n\n    // for each video in the current list of video endpoints\n\n    // check db for the plate\n\n    // if unrecognized, send to db and alert \n\n    let currentPlateNumber = '123456'\n\n    // eventually changed to get unrecognized plates from db \n\n    if(!(unrecognizedList.includes(currentPlateNumber))){\n\n        let response = Axios.post('/api/unrecognized/addUnrecognized', {\n            plateNumber: currentPlateNumber\n        })\n\n        console.log(response)\n        unrecognizedList.push(currentPlateNumber)\n    }\n\n    setTimeout(sendImage, 10000)\n}   \n\n\nmodule.exports = sendImage"]},"metadata":{},"sourceType":"module"}