{"ast":null,"code":"const Axios = require('axios');\n\nconst Tesseract = require('tesseract.js'); // testing images and videos\n\n\nconst carsTest = require('../cameraFeed/carsTest.mp4');\n\nconst testPlate = require('./testPlate.jpg');\n\nconst testPlate1 = require('./testPlate1.jpg');\n\nconst testCars = require('./testCars.jpeg');\n\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\n\nconst modelTest = require('./testingModel.jpg');\n\nconst securityTest = require('./security.mp4');\n\nlet video = document.createElement('VIDEO');\nvideo.setAttribute('autoplay', 'true');\nvideo.setAttribute('controls', 'controls');\nvideo.src = securityTest;\nlet unrecognizedList = [];\n\nconst sendImage = async () => {\n  // load TensorFlow model\n  const model = await cocoSsd.load(); // classify image\n\n  const predictions = await model.detect(modelTest); // \n\n  console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized');\n\n  if (predictions.length) {\n    predictions.forEach(d => {\n      if (d.class === \"car\") {\n        console.log(\"Car recognized\");\n        console.log(d.bbox);\n      }\n    });\n  }\n\n  Tesseract.recognize(testPlate1, 'eng').then(({\n    data: {\n      text\n    }\n  }) => {\n    console.log(\"Recognized text: \", text);\n  }); // for each video in the current list of video endpoints\n  // check db for the plate\n  // if unrecognized, send to db and alert \n\n  let currentPlateNumber = '123456'; // eventually changed to get unrecognized plates from db \n\n  if (!unrecognizedList.includes(currentPlateNumber)) {\n    let response = Axios.post('/api/unrecognized/addUnrecognized', {\n      plateNumber: currentPlateNumber\n    });\n    console.log(response);\n    unrecognizedList.push(currentPlateNumber);\n  }\n\n  setTimeout(sendImage, 10000);\n};\n\nmodule.exports = sendImage;","map":{"version":3,"sources":["/Users/aleclawlor/SecureVision/client/src/components/dashboard/sendFeed.js"],"names":["Axios","require","Tesseract","carsTest","testPlate","testPlate1","testCars","cocoSsd","modelTest","securityTest","video","document","createElement","setAttribute","src","unrecognizedList","sendImage","model","load","predictions","detect","console","log","length","forEach","d","class","bbox","recognize","then","data","text","currentPlateNumber","includes","response","post","plateNumber","push","setTimeout","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB,C,CAEA;;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,4BAAD,CAAxB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,6BAAD,CAAvB;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAMQ,YAAY,GAAGR,OAAO,CAAC,gBAAD,CAA5B;;AAEA,IAAIS,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ;AACAF,KAAK,CAACG,YAAN,CAAmB,UAAnB,EAA+B,MAA/B;AACAH,KAAK,CAACG,YAAN,CAAmB,UAAnB,EAA+B,UAA/B;AAEAH,KAAK,CAACI,GAAN,GAAYL,YAAZ;AAEA,IAAIM,gBAAgB,GAAG,EAAvB;;AAEA,MAAMC,SAAS,GAAG,YAAW;AAEzB;AACA,QAAMC,KAAK,GAAG,MAAMV,OAAO,CAACW,IAAR,EAApB,CAHyB,CAKzB;;AACA,QAAMC,WAAW,GAAG,MAAMF,KAAK,CAACG,MAAN,CAAaZ,SAAb,CAA1B,CANyB,CAQzB;;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,WAAW,CAACI,MAAZ,GAAqBJ,WAArB,GAAmC,oBAAhE;;AACA,MAAGA,WAAW,CAACI,MAAf,EAAsB;AAClBJ,IAAAA,WAAW,CAACK,OAAZ,CAAqBC,CAAD,IAAO;AACvB,UAAGA,CAAC,CAACC,KAAF,KAAY,KAAf,EAAqB;AACrBL,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYG,CAAC,CAACE,IAAd;AACC;AACJ,KALD;AAMH;;AAEDzB,EAAAA,SAAS,CAAC0B,SAAV,CACIvB,UADJ,EAEI,KAFJ,EAGEwB,IAHF,CAGO,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAD,KAAwB;AAC3BV,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCS,IAAjC;AACH,GALD,EAnByB,CA0BzB;AAEA;AAEA;;AAEA,MAAIC,kBAAkB,GAAG,QAAzB,CAhCyB,CAkCzB;;AACA,MAAG,CAAEjB,gBAAgB,CAACkB,QAAjB,CAA0BD,kBAA1B,CAAL,EAAoD;AAEhD,QAAIE,QAAQ,GAAGlC,KAAK,CAACmC,IAAN,CAAW,mCAAX,EAAgD;AAC3DC,MAAAA,WAAW,EAAEJ;AAD8C,KAAhD,CAAf;AAIAX,IAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACAnB,IAAAA,gBAAgB,CAACsB,IAAjB,CAAsBL,kBAAtB;AACH;;AAEDM,EAAAA,UAAU,CAACtB,SAAD,EAAY,KAAZ,CAAV;AACH,CA9CD;;AAiDAuB,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["const Axios = require('axios')\nconst Tesseract = require('tesseract.js')\n\n// testing images and videos\nconst carsTest = require('../cameraFeed/carsTest.mp4')\nconst testPlate = require('./testPlate.jpg')\nconst testPlate1 = require('./testPlate1.jpg')\nconst testCars = require('./testCars.jpeg')\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\nconst modelTest = require('./testingModel.jpg')\nconst securityTest = require('./security.mp4')\n\nlet video = document.createElement('VIDEO')\nvideo.setAttribute('autoplay', 'true')\nvideo.setAttribute('controls', 'controls')\n\nvideo.src = securityTest\n\nlet unrecognizedList = []\n\nconst sendImage = async() => {\n\n    // load TensorFlow model\n    const model = await cocoSsd.load()\n    \n    // classify image\n    const predictions = await model.detect(modelTest)\n\n    // \n    console.log(\"Predictions: \", predictions.length ? predictions : 'nothing recognized')\n    if(predictions.length){\n        predictions.forEach((d) => {\n            if(d.class === \"car\"){\n            console.log(\"Car recognized\")\n            console.log(d.bbox)\n            }\n        })\n    }\n    \n    Tesseract.recognize(\n        testPlate1,\n        'eng'\n    ).then(({ data: { text }} ) => {\n        console.log(\"Recognized text: \", text)\n    })\n\n    // for each video in the current list of video endpoints\n\n    // check db for the plate\n\n    // if unrecognized, send to db and alert \n\n    let currentPlateNumber = '123456'\n\n    // eventually changed to get unrecognized plates from db \n    if(!(unrecognizedList.includes(currentPlateNumber))){\n\n        let response = Axios.post('/api/unrecognized/addUnrecognized', {\n            plateNumber: currentPlateNumber\n        })\n\n        console.log(response)\n        unrecognizedList.push(currentPlateNumber)\n    }\n\n    setTimeout(sendImage, 10000)\n}   \n\n\nmodule.exports = sendImage"]},"metadata":{},"sourceType":"module"}